// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly POW = 3;
	public static readonly MUL = 4;
	public static readonly DIV = 5;
	public static readonly MOD = 6;
	public static readonly ADD = 7;
	public static readonly SUB = 8;
	public static readonly NUMBER = 9;
	public static readonly WHITESPACE = 10;
	public static readonly LETTER = 11;
	public static readonly GT = 12;
	public static readonly LT = 13;
	public static readonly GE = 14;
	public static readonly LE = 15;
	public static readonly AND = 16;
	public static readonly OR = 17;
	public static readonly BOOLEAN = 18;
	public static readonly Stringliteral = 19;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "POW", "MUL", "DIV", "MOD", "ADD", "SUB", "NUMBER", "WHITESPACE", 
		"LETTER", "GT", "LT", "GE", "LE", "AND", "OR", "BOOLEAN", "Stringliteral", 
		"Encodingprefix", "Schar", "Rawstring",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "')'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", undefined, 
		undefined, undefined, "'>'", "'<'", "'>='", "'<='", "'&&'", "'||'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "POW", "MUL", "DIV", "MOD", "ADD", "SUB", 
		"NUMBER", "WHITESPACE", "LETTER", "GT", "LT", "GE", "LE", "AND", "OR", 
		"BOOLEAN", "Stringliteral",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x15\x98\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x06\nA\n\n" +
		"\r\n\x0E\nB\x03\v\x06\vF\n\v\r\v\x0E\vG\x03\v\x03\v\x03\f\x03\f\x03\r" +
		"\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10" +
		"\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13g\n\x13\x03\x14" +
		"\x05\x14j\n\x14\x03\x14\x03\x14\x07\x14n\n\x14\f\x14\x0E\x14q\v\x14\x03" +
		"\x14\x03\x14\x05\x14u\n\x14\x03\x14\x03\x14\x05\x14y\n\x14\x03\x15\x03" +
		"\x15\x03\x15\x05\x15~\n\x15\x03\x16\x03\x16\x03\x17\x03\x17\x07\x17\x84" +
		"\n\x17\f\x17\x0E\x17\x87\v\x17\x03\x17\x03\x17\x07\x17\x8B\n\x17\f\x17" +
		"\x0E\x17\x8E\v\x17\x03\x17\x03\x17\x07\x17\x92\n\x17\f\x17\x0E\x17\x95" +
		"\v\x17\x03\x17\x03\x17\x05\x85\x8C\x93\x02\x02\x18\x03\x02\x03\x05\x02" +
		"\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02" +
		"\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11" +
		"!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x02+\x02\x02-\x02\x02\x03\x02" +
		"\x07\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x04\x02C\\c|\x05\x02NNWWww\x05" +
		"\x02C\\aac|\x02\x9F\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02" +
		"\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r" +
		"\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13" +
		"\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19" +
		"\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F" +
		"\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02" +
		"\x02\x02\x02\'\x03\x02\x02\x02\x03/\x03\x02\x02\x02\x051\x03\x02\x02\x02" +
		"\x073\x03\x02\x02\x02\t5\x03\x02\x02\x02\v7\x03\x02\x02\x02\r9\x03\x02" +
		"\x02\x02\x0F;\x03\x02\x02\x02\x11=\x03\x02\x02\x02\x13@\x03\x02\x02\x02" +
		"\x15E\x03\x02\x02\x02\x17K\x03\x02\x02\x02\x19M\x03\x02\x02\x02\x1BO\x03" +
		"\x02\x02\x02\x1DQ\x03\x02\x02\x02\x1FT\x03\x02\x02\x02!W\x03\x02\x02\x02" +
		"#Z\x03\x02\x02\x02%f\x03\x02\x02\x02\'x\x03\x02\x02\x02)}\x03\x02\x02" +
		"\x02+\x7F\x03\x02\x02\x02-\x81\x03\x02\x02\x02/0\x07*\x02\x020\x04\x03" +
		"\x02\x02\x0212\x07+\x02\x022\x06\x03\x02\x02\x0234\x07`\x02\x024\b\x03" +
		"\x02\x02\x0256\x07,\x02\x026\n\x03\x02\x02\x0278\x071\x02\x028\f\x03\x02" +
		"\x02\x029:\x07\'\x02\x02:\x0E\x03\x02\x02\x02;<\x07-\x02\x02<\x10\x03" +
		"\x02\x02\x02=>\x07/\x02\x02>\x12\x03\x02\x02\x02?A\t\x02\x02\x02@?\x03" +
		"\x02\x02\x02AB\x03\x02\x02\x02B@\x03\x02\x02\x02BC\x03\x02\x02\x02C\x14" +
		"\x03\x02\x02\x02DF\t\x03\x02\x02ED\x03\x02\x02\x02FG\x03\x02\x02\x02G" +
		"E\x03\x02\x02\x02GH\x03\x02\x02\x02HI\x03\x02\x02\x02IJ\b\v\x02\x02J\x16" +
		"\x03\x02\x02\x02KL\t\x04\x02\x02L\x18\x03\x02\x02\x02MN\x07@\x02\x02N" +
		"\x1A\x03\x02\x02\x02OP\x07>\x02\x02P\x1C\x03\x02\x02\x02QR\x07@\x02\x02" +
		"RS\x07?\x02\x02S\x1E\x03\x02\x02\x02TU\x07>\x02\x02UV\x07?\x02\x02V \x03" +
		"\x02\x02\x02WX\x07(\x02\x02XY\x07(\x02\x02Y\"\x03\x02\x02\x02Z[\x07~\x02" +
		"\x02[\\\x07~\x02\x02\\$\x03\x02\x02\x02]^\x07v\x02\x02^_\x07t\x02\x02" +
		"_`\x07w\x02\x02`g\x07g\x02\x02ab\x07h\x02\x02bc\x07c\x02\x02cd\x07n\x02" +
		"\x02de\x07u\x02\x02eg\x07g\x02\x02f]\x03\x02\x02\x02fa\x03\x02\x02\x02" +
		"g&\x03\x02\x02\x02hj\x05)\x15\x02ih\x03\x02\x02\x02ij\x03\x02\x02\x02" +
		"jk\x03\x02\x02\x02ko\x07$\x02\x02ln\x05+\x16\x02ml\x03\x02\x02\x02nq\x03" +
		"\x02\x02\x02om\x03\x02\x02\x02op\x03\x02\x02\x02pr\x03\x02\x02\x02qo\x03" +
		"\x02\x02\x02ry\x07$\x02\x02su\x05)\x15\x02ts\x03\x02\x02\x02tu\x03\x02" +
		"\x02\x02uv\x03\x02\x02\x02vw\x07T\x02\x02wy\x05-\x17\x02xi\x03\x02\x02" +
		"\x02xt\x03\x02\x02\x02y(\x03\x02\x02\x02z{\x07w\x02\x02{~\x07:\x02\x02" +
		"|~\t\x05\x02\x02}z\x03\x02\x02\x02}|\x03\x02\x02\x02~*\x03\x02\x02\x02" +
		"\x7F\x80\t\x06\x02\x02\x80,\x03\x02\x02\x02\x81\x85\x07$\x02\x02\x82\x84" +
		"\v\x02\x02\x02\x83\x82\x03\x02\x02\x02\x84\x87\x03\x02\x02\x02\x85\x86" +
		"\x03\x02\x02\x02\x85\x83\x03\x02\x02\x02\x86\x88\x03\x02\x02\x02\x87\x85" +
		"\x03\x02\x02\x02\x88\x8C\x07*\x02\x02\x89\x8B\v\x02\x02\x02\x8A\x89\x03" +
		"\x02\x02\x02\x8B\x8E\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8C\x8A\x03" +
		"\x02\x02\x02\x8D\x8F\x03\x02\x02\x02\x8E\x8C\x03\x02\x02\x02\x8F\x93\x07" +
		"+\x02\x02\x90\x92\v\x02\x02\x02\x91\x90\x03\x02\x02\x02\x92\x95\x03\x02" +
		"\x02\x02\x93\x94\x03\x02\x02\x02\x93\x91\x03\x02\x02\x02\x94\x96\x03\x02" +
		"\x02\x02\x95\x93\x03\x02\x02\x02\x96\x97\x07$\x02\x02\x97.\x03\x02\x02" +
		"\x02\x0E\x02BGfiotx}\x85\x8C\x93\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

