// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly POW = 6;
	public static readonly MUL = 7;
	public static readonly DIV = 8;
	public static readonly MOD = 9;
	public static readonly ADD = 10;
	public static readonly SUB = 11;
	public static readonly EQUAL = 12;
	public static readonly AND = 13;
	public static readonly OR = 14;
	public static readonly BOOLEAN = 15;
	public static readonly GT = 16;
	public static readonly LT = 17;
	public static readonly GE = 18;
	public static readonly LE = 19;
	public static readonly NUMBER = 20;
	public static readonly REAL = 21;
	public static readonly WHITESPACE = 22;
	public static readonly LETTER = 23;
	public static readonly VAL = 24;
	public static readonly Stringliteral = 25;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "POW", "MUL", "DIV", "MOD", "ADD", 
		"SUB", "EQUAL", "AND", "OR", "BOOLEAN", "GT", "LT", "GE", "LE", "NUMBER", 
		"REAL", "WHITESPACE", "LETTER", "VAL", "Stringliteral", "Encodingprefix", 
		"Rawstring",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':='", "';'", "'('", "')'", "'let'", "'^'", "'*'", "'/'", 
		"'%'", "'+'", "'-'", "'='", undefined, undefined, undefined, "'>'", "'<'", 
		"'>='", "'<='", undefined, undefined, undefined, undefined, "'val'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, "POW", 
		"MUL", "DIV", "MOD", "ADD", "SUB", "EQUAL", "AND", "OR", "BOOLEAN", "GT", 
		"LT", "GE", "LE", "NUMBER", "REAL", "WHITESPACE", "LETTER", "VAL", "Stringliteral",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1B\xBE\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03" +
		"\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t" +
		"\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x05\x0Ea\n\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0Fm\n\x0F\x03\x10\x03\x10\x03\x10" +
		"\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10x\n\x10\x03\x11" +
		"\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14" +
		"\x03\x15\x06\x15\x85\n\x15\r\x15\x0E\x15\x86\x03\x16\x06\x16\x8A\n\x16" +
		"\r\x16\x0E\x16\x8B\x03\x16\x03\x16\x06\x16\x90\n\x16\r\x16\x0E\x16\x91" +
		"\x03\x17\x06\x17\x95\n\x17\r\x17\x0E\x17\x96\x03\x17\x03\x17\x03\x18\x03" +
		"\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03" +
		"\x1B\x05\x1B\xA6\n\x1B\x03\x1C\x03\x1C\x07\x1C\xAA\n\x1C\f\x1C\x0E\x1C" +
		"\xAD\v\x1C\x03\x1C\x03\x1C\x07\x1C\xB1\n\x1C\f\x1C\x0E\x1C\xB4\v\x1C\x03" +
		"\x1C\x03\x1C\x07\x1C\xB8\n\x1C\f\x1C\x0E\x1C\xBB\v\x1C\x03\x1C\x03\x1C" +
		"\x05\xAB\xB2\xB9\x02\x02\x1D\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02" +
		"\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02" +
		"\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%" +
		"\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B" +
		"5\x02\x027\x02\x02\x03\x02\x07\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x04\x02" +
		"C\\c|\x05\x022;C\\c|\x05\x02NNWWww\x02\xC8\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03" +
		"\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02" +
		"\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x02" +
		"1\x03\x02\x02\x02\x023\x03\x02\x02\x02\x039\x03\x02\x02\x02\x05<\x03\x02" +
		"\x02\x02\x07>\x03\x02\x02\x02\t@\x03\x02\x02\x02\vB\x03\x02\x02\x02\r" +
		"F\x03\x02\x02\x02\x0FH\x03\x02\x02\x02\x11J\x03\x02\x02\x02\x13L\x03\x02" +
		"\x02\x02\x15N\x03\x02\x02\x02\x17P\x03\x02\x02\x02\x19R\x03\x02\x02\x02" +
		"\x1B`\x03\x02\x02\x02\x1Dl\x03\x02\x02\x02\x1Fw\x03\x02\x02\x02!y\x03" +
		"\x02\x02\x02#{\x03\x02\x02\x02%}\x03\x02\x02\x02\'\x80\x03\x02\x02\x02" +
		")\x84\x03\x02\x02\x02+\x89\x03\x02\x02\x02-\x94\x03\x02\x02\x02/\x9A\x03" +
		"\x02\x02\x021\x9C\x03\x02\x02\x023\xA0\x03\x02\x02\x025\xA5\x03\x02\x02" +
		"\x027\xA7\x03\x02\x02\x029:\x07<\x02\x02:;\x07?\x02\x02;\x04\x03\x02\x02" +
		"\x02<=\x07=\x02\x02=\x06\x03\x02\x02\x02>?\x07*\x02\x02?\b\x03\x02\x02" +
		"\x02@A\x07+\x02\x02A\n\x03\x02\x02\x02BC\x07n\x02\x02CD\x07g\x02\x02D" +
		"E\x07v\x02\x02E\f\x03\x02\x02\x02FG\x07`\x02\x02G\x0E\x03\x02\x02\x02" +
		"HI\x07,\x02\x02I\x10\x03\x02\x02\x02JK\x071\x02\x02K\x12\x03\x02\x02\x02" +
		"LM\x07\'\x02\x02M\x14\x03\x02\x02\x02NO\x07-\x02\x02O\x16\x03\x02\x02" +
		"\x02PQ\x07/\x02\x02Q\x18\x03\x02\x02\x02RS\x07?\x02\x02S\x1A\x03\x02\x02" +
		"\x02TU\x07(\x02\x02Ua\x07(\x02\x02VW\x07c\x02\x02WX\x07p\x02\x02Xa\x07" +
		"f\x02\x02YZ\x07c\x02\x02Z[\x07p\x02\x02[\\\x07f\x02\x02\\]\x07c\x02\x02" +
		"]^\x07n\x02\x02^_\x07u\x02\x02_a\x07q\x02\x02`T\x03\x02\x02\x02`V\x03" +
		"\x02\x02\x02`Y\x03\x02\x02\x02a\x1C\x03\x02\x02\x02bc\x07~\x02\x02cm\x07" +
		"~\x02\x02de\x07q\x02\x02em\x07t\x02\x02fg\x07q\x02\x02gh\x07t\x02\x02" +
		"hi\x07g\x02\x02ij\x07n\x02\x02jk\x07u\x02\x02km\x07g\x02\x02lb\x03\x02" +
		"\x02\x02ld\x03\x02\x02\x02lf\x03\x02\x02\x02m\x1E\x03\x02\x02\x02no\x07" +
		"v\x02\x02op\x07t\x02\x02pq\x07w\x02\x02qx\x07g\x02\x02rs\x07h\x02\x02" +
		"st\x07c\x02\x02tu\x07n\x02\x02uv\x07u\x02\x02vx\x07g\x02\x02wn\x03\x02" +
		"\x02\x02wr\x03\x02\x02\x02x \x03\x02\x02\x02yz\x07@\x02\x02z\"\x03\x02" +
		"\x02\x02{|\x07>\x02\x02|$\x03\x02\x02\x02}~\x07@\x02\x02~\x7F\x07?\x02" +
		"\x02\x7F&\x03\x02\x02\x02\x80\x81\x07>\x02\x02\x81\x82\x07?\x02\x02\x82" +
		"(\x03\x02\x02\x02\x83\x85\t\x02\x02\x02\x84\x83\x03\x02\x02\x02\x85\x86" +
		"\x03\x02\x02\x02\x86\x84\x03\x02\x02\x02\x86\x87\x03\x02\x02\x02\x87*" +
		"\x03\x02\x02\x02\x88\x8A\t\x02\x02\x02\x89\x88\x03\x02\x02\x02\x8A\x8B" +
		"\x03\x02\x02\x02\x8B\x89\x03\x02\x02\x02\x8B\x8C\x03\x02\x02\x02\x8C\x8D" +
		"\x03\x02\x02\x02\x8D\x8F\x070\x02\x02\x8E\x90\t\x02\x02\x02\x8F\x8E\x03" +
		"\x02\x02\x02\x90\x91\x03\x02\x02\x02\x91\x8F\x03\x02\x02\x02\x91\x92\x03" +
		"\x02\x02\x02\x92,\x03\x02\x02\x02\x93\x95\t\x03\x02\x02\x94\x93\x03\x02" +
		"\x02\x02\x95\x96\x03\x02\x02\x02\x96\x94\x03\x02\x02\x02\x96\x97\x03\x02" +
		"\x02\x02\x97\x98\x03\x02\x02\x02\x98\x99\b\x17\x02\x02\x99.\x03\x02\x02" +
		"\x02\x9A\x9B\t\x04\x02\x02\x9B0\x03\x02\x02\x02\x9C\x9D\x07x\x02\x02\x9D" +
		"\x9E\x07c\x02\x02\x9E\x9F\x07n\x02\x02\x9F2\x03\x02\x02\x02\xA0\xA1\t" +
		"\x05\x02\x02\xA14\x03\x02\x02\x02\xA2\xA3\x07w\x02\x02\xA3\xA6\x07:\x02" +
		"\x02\xA4\xA6\t\x06\x02\x02\xA5\xA2\x03\x02\x02\x02\xA5\xA4\x03\x02\x02" +
		"\x02\xA66\x03\x02\x02\x02\xA7\xAB\x07$\x02\x02\xA8\xAA\v\x02\x02\x02\xA9" +
		"\xA8\x03\x02\x02\x02\xAA\xAD\x03\x02\x02\x02\xAB\xAC\x03\x02\x02\x02\xAB" +
		"\xA9\x03\x02\x02\x02\xAC\xAE\x03\x02\x02\x02\xAD\xAB\x03\x02\x02\x02\xAE" +
		"\xB2\x07*\x02\x02\xAF\xB1\v\x02\x02\x02\xB0\xAF\x03\x02\x02\x02\xB1\xB4" +
		"\x03\x02\x02\x02\xB2\xB3\x03\x02\x02\x02\xB2\xB0\x03\x02\x02\x02\xB3\xB5" +
		"\x03\x02\x02\x02\xB4\xB2\x03\x02\x02\x02\xB5\xB9\x07+\x02\x02\xB6\xB8" +
		"\v\x02\x02\x02\xB7\xB6\x03\x02\x02\x02\xB8\xBB\x03\x02\x02\x02\xB9\xBA" +
		"\x03\x02\x02\x02\xB9\xB7\x03\x02\x02\x02\xBA\xBC\x03\x02\x02\x02\xBB\xB9" +
		"\x03\x02\x02\x02\xBC\xBD\x07$\x02\x02\xBD8\x03\x02\x02\x02\x0E\x02`lw" +
		"\x86\x8B\x91\x96\xA5\xAB\xB2\xB9\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

