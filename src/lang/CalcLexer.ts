// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly POW = 4;
	public static readonly MUL = 5;
	public static readonly DIV = 6;
	public static readonly MOD = 7;
	public static readonly ADD = 8;
	public static readonly SUB = 9;
	public static readonly EQUAL = 10;
	public static readonly NUMBER = 11;
	public static readonly WHITESPACE = 12;
	public static readonly LETTER = 13;
	public static readonly GT = 14;
	public static readonly LT = 15;
	public static readonly GE = 16;
	public static readonly LE = 17;
	public static readonly AND = 18;
	public static readonly OR = 19;
	public static readonly BOOLEAN = 20;
	public static readonly Stringliteral = 21;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "POW", "MUL", "DIV", "MOD", "ADD", "SUB", "EQUAL", 
		"NUMBER", "WHITESPACE", "LETTER", "GT", "LT", "GE", "LE", "AND", "OR", 
		"BOOLEAN", "Stringliteral", "Encodingprefix", "Rawstring",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':='", "'('", "')'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'='", undefined, undefined, undefined, "'>'", "'<'", "'>='", "'<='", 
		"'&&'", "'||'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "POW", "MUL", "DIV", "MOD", 
		"ADD", "SUB", "EQUAL", "NUMBER", "WHITESPACE", "LETTER", "GT", "LT", "GE", 
		"LE", "AND", "OR", "BOOLEAN", "Stringliteral",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x17\x90\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t" +
		"\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x06\fH\n\f\r\f\x0E\fI\x03\r\x06\r" +
		"M\n\r\r\r\x0E\rN\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03" +
		"\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03" +
		"\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03" +
		"\x15\x03\x15\x03\x15\x03\x15\x05\x15n\n\x15\x03\x16\x06\x16q\n\x16\r\x16" +
		"\x0E\x16r\x03\x17\x03\x17\x03\x17\x05\x17x\n\x17\x03\x18\x03\x18\x07\x18" +
		"|\n\x18\f\x18\x0E\x18\x7F\v\x18\x03\x18\x03\x18\x07\x18\x83\n\x18\f\x18" +
		"\x0E\x18\x86\v\x18\x03\x18\x03\x18\x07\x18\x8A\n\x18\f\x18\x0E\x18\x8D" +
		"\v\x18\x03\x18\x03\x18\x05}\x84\x8B\x02\x02\x19\x03\x02\x03\x05\x02\x04" +
		"\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v" +
		"\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!" +
		"\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x02/\x02\x02" +
		"\x03\x02\x07\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x04\x02C\\c|\x05\x022;" +
		"C\\c|\x05\x02NNWWww\x02\x95\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02" +
		"\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02" +
		"\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02" +
		"\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02" +
		"\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02" +
		"\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02" +
		"%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03" +
		"\x02\x02\x02\x031\x03\x02\x02\x02\x054\x03\x02\x02\x02\x076\x03\x02\x02" +
		"\x02\t8\x03\x02\x02\x02\v:\x03\x02\x02\x02\r<\x03\x02\x02\x02\x0F>\x03" +
		"\x02\x02\x02\x11@\x03\x02\x02\x02\x13B\x03\x02\x02\x02\x15D\x03\x02\x02" +
		"\x02\x17G\x03\x02\x02\x02\x19L\x03\x02\x02\x02\x1BR\x03\x02\x02\x02\x1D" +
		"T\x03\x02\x02\x02\x1FV\x03\x02\x02\x02!X\x03\x02\x02\x02#[\x03\x02\x02" +
		"\x02%^\x03\x02\x02\x02\'a\x03\x02\x02\x02)m\x03\x02\x02\x02+p\x03\x02" +
		"\x02\x02-w\x03\x02\x02\x02/y\x03\x02\x02\x0212\x07<\x02\x0223\x07?\x02" +
		"\x023\x04\x03\x02\x02\x0245\x07*\x02\x025\x06\x03\x02\x02\x0267\x07+\x02" +
		"\x027\b\x03\x02\x02\x0289\x07`\x02\x029\n\x03\x02\x02\x02:;\x07,\x02\x02" +
		";\f\x03\x02\x02\x02<=\x071\x02\x02=\x0E\x03\x02\x02\x02>?\x07\'\x02\x02" +
		"?\x10\x03\x02\x02\x02@A\x07-\x02\x02A\x12\x03\x02\x02\x02BC\x07/\x02\x02" +
		"C\x14\x03\x02\x02\x02DE\x07?\x02\x02E\x16\x03\x02\x02\x02FH\t\x02\x02" +
		"\x02GF\x03\x02\x02\x02HI\x03\x02\x02\x02IG\x03\x02\x02\x02IJ\x03\x02\x02" +
		"\x02J\x18\x03\x02\x02\x02KM\t\x03\x02\x02LK\x03\x02\x02\x02MN\x03\x02" +
		"\x02\x02NL\x03\x02\x02\x02NO\x03\x02\x02\x02OP\x03\x02\x02\x02PQ\b\r\x02" +
		"\x02Q\x1A\x03\x02\x02\x02RS\t\x04\x02\x02S\x1C\x03\x02\x02\x02TU\x07@" +
		"\x02\x02U\x1E\x03\x02\x02\x02VW\x07>\x02\x02W \x03\x02\x02\x02XY\x07@" +
		"\x02\x02YZ\x07?\x02\x02Z\"\x03\x02\x02\x02[\\\x07>\x02\x02\\]\x07?\x02" +
		"\x02]$\x03\x02\x02\x02^_\x07(\x02\x02_`\x07(\x02\x02`&\x03\x02\x02\x02" +
		"ab\x07~\x02\x02bc\x07~\x02\x02c(\x03\x02\x02\x02de\x07v\x02\x02ef\x07" +
		"t\x02\x02fg\x07w\x02\x02gn\x07g\x02\x02hi\x07h\x02\x02ij\x07c\x02\x02" +
		"jk\x07n\x02\x02kl\x07u\x02\x02ln\x07g\x02\x02md\x03\x02\x02\x02mh\x03" +
		"\x02\x02\x02n*\x03\x02\x02\x02oq\t\x05\x02\x02po\x03\x02\x02\x02qr\x03" +
		"\x02\x02\x02rp\x03\x02\x02\x02rs\x03\x02\x02\x02s,\x03\x02\x02\x02tu\x07" +
		"w\x02\x02ux\x07:\x02\x02vx\t\x06\x02\x02wt\x03\x02\x02\x02wv\x03\x02\x02" +
		"\x02x.\x03\x02\x02\x02y}\x07$\x02\x02z|\v\x02\x02\x02{z\x03\x02\x02\x02" +
		"|\x7F\x03\x02\x02\x02}~\x03\x02\x02\x02}{\x03\x02\x02\x02~\x80\x03\x02" +
		"\x02\x02\x7F}\x03\x02\x02\x02\x80\x84\x07*\x02\x02\x81\x83\v\x02\x02\x02" +
		"\x82\x81\x03\x02\x02\x02\x83\x86\x03\x02\x02\x02\x84\x85\x03\x02\x02\x02" +
		"\x84\x82\x03\x02\x02\x02\x85\x87\x03\x02\x02\x02\x86\x84\x03\x02\x02\x02" +
		"\x87\x8B\x07+\x02\x02\x88\x8A\v\x02\x02\x02\x89\x88\x03\x02\x02\x02\x8A" +
		"\x8D\x03\x02\x02\x02\x8B\x8C\x03\x02\x02\x02\x8B\x89\x03\x02\x02\x02\x8C" +
		"\x8E\x03\x02\x02\x02\x8D\x8B\x03\x02\x02\x02\x8E\x8F\x07$\x02\x02\x8F" +
		"0\x03\x02\x02\x02\v\x02INmrw}\x84\x8B\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

