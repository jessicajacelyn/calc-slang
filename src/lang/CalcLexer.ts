// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly POW = 6;
	public static readonly MUL = 7;
	public static readonly DIV = 8;
	public static readonly MOD = 9;
	public static readonly ADD = 10;
	public static readonly SUB = 11;
	public static readonly EQUAL = 12;
	public static readonly AND = 13;
	public static readonly OR = 14;
	public static readonly BOOLEAN = 15;
	public static readonly GT = 16;
	public static readonly LT = 17;
	public static readonly GE = 18;
	public static readonly LE = 19;
	public static readonly NUMBER = 20;
	public static readonly WHITESPACE = 21;
	public static readonly LETTER = 22;
	public static readonly VAL = 23;
	public static readonly Stringliteral = 24;
	public static readonly IF = 25;
	public static readonly THEN = 26;
	public static readonly ELSE = 27;
	public static readonly WHILE = 28;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "POW", "MUL", "DIV", "MOD", "ADD", 
		"SUB", "EQUAL", "AND", "OR", "BOOLEAN", "GT", "LT", "GE", "LE", "NUMBER", 
		"WHITESPACE", "LETTER", "VAL", "Stringliteral", "Encodingprefix", "Rawstring", 
		"IF", "THEN", "ELSE", "WHILE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':='", "';'", "'('", "')'", "'let'", "'^'", "'*'", "'/'", 
		"'%'", "'+'", "'-'", "'='", undefined, undefined, undefined, "'>'", "'<'", 
		"'>='", "'<='", undefined, undefined, undefined, "'val'", undefined, "'if'", 
		"'then'", "'else'", "'while'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, "POW", 
		"MUL", "DIV", "MOD", "ADD", "SUB", "EQUAL", "AND", "OR", "BOOLEAN", "GT", 
		"LT", "GE", "LE", "NUMBER", "WHITESPACE", "LETTER", "VAL", "Stringliteral", 
		"IF", "THEN", "ELSE", "WHILE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1E\xCC\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x03\x02\x03\x02\x03\x02" +
		"\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06" +
		"\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03" +
		"\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0Eg\n\x0E\x03" +
		"\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x05\x0Fs\n\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x05\x10~\n\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03" +
		"\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x06\x15\x8B\n\x15" +
		"\r\x15\x0E\x15\x8C\x03\x16\x06\x16\x90\n\x16\r\x16\x0E\x16\x91\x03\x16" +
		"\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19" +
		"\x03\x1A\x03\x1A\x03\x1A\x05\x1A\xA1\n\x1A\x03\x1B\x03\x1B\x07\x1B\xA5" +
		"\n\x1B\f\x1B\x0E\x1B\xA8\v\x1B\x03\x1B\x03\x1B\x07\x1B\xAC\n\x1B\f\x1B" +
		"\x0E\x1B\xAF\v\x1B\x03\x1B\x03\x1B\x07\x1B\xB3\n\x1B\f\x1B\x0E\x1B\xB6" +
		"\v\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D" +
		"\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F" +
		"\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x05\xA6\xAD\xB4\x02\x02 \x03\x02\x03" +
		"\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02" +
		"\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F" +
		"\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18" +
		"/\x02\x191\x02\x1A3\x02\x025\x02\x027\x02\x1B9\x02\x1C;\x02\x1D=\x02\x1E" +
		"\x03\x02\x07\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x04\x02C\\c|\x05\x022;" +
		"C\\c|\x05\x02NNWWww\x02\xD4\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02" +
		"\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02" +
		"\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02" +
		"\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02" +
		"\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02" +
		"\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02" +
		"%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03" +
		"\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02" +
		"\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02" +
		"=\x03\x02\x02\x02\x03?\x03\x02\x02\x02\x05B\x03\x02\x02\x02\x07D\x03\x02" +
		"\x02\x02\tF\x03\x02\x02\x02\vH\x03\x02\x02\x02\rL\x03\x02\x02\x02\x0F" +
		"N\x03\x02\x02\x02\x11P\x03\x02\x02\x02\x13R\x03\x02\x02\x02\x15T\x03\x02" +
		"\x02\x02\x17V\x03\x02\x02\x02\x19X\x03\x02\x02\x02\x1Bf\x03\x02\x02\x02" +
		"\x1Dr\x03\x02\x02\x02\x1F}\x03\x02\x02\x02!\x7F\x03\x02\x02\x02#\x81\x03" +
		"\x02\x02\x02%\x83\x03\x02\x02\x02\'\x86\x03\x02\x02\x02)\x8A\x03\x02\x02" +
		"\x02+\x8F\x03\x02\x02\x02-\x95\x03\x02\x02\x02/\x97\x03\x02\x02\x021\x9B" +
		"\x03\x02\x02\x023\xA0\x03\x02\x02\x025\xA2\x03\x02\x02\x027\xB9\x03\x02" +
		"\x02\x029\xBC\x03\x02\x02\x02;\xC1\x03\x02\x02\x02=\xC6\x03\x02\x02\x02" +
		"?@\x07<\x02\x02@A\x07?\x02\x02A\x04\x03\x02\x02\x02BC\x07=\x02\x02C\x06" +
		"\x03\x02\x02\x02DE\x07*\x02\x02E\b\x03\x02\x02\x02FG\x07+\x02\x02G\n\x03" +
		"\x02\x02\x02HI\x07n\x02\x02IJ\x07g\x02\x02JK\x07v\x02\x02K\f\x03\x02\x02" +
		"\x02LM\x07`\x02\x02M\x0E\x03\x02\x02\x02NO\x07,\x02\x02O\x10\x03\x02\x02" +
		"\x02PQ\x071\x02\x02Q\x12\x03\x02\x02\x02RS\x07\'\x02\x02S\x14\x03\x02" +
		"\x02\x02TU\x07-\x02\x02U\x16\x03\x02\x02\x02VW\x07/\x02\x02W\x18\x03\x02" +
		"\x02\x02XY\x07?\x02\x02Y\x1A\x03\x02\x02\x02Z[\x07(\x02\x02[g\x07(\x02" +
		"\x02\\]\x07c\x02\x02]^\x07p\x02\x02^g\x07f\x02\x02_`\x07c\x02\x02`a\x07" +
		"p\x02\x02ab\x07f\x02\x02bc\x07c\x02\x02cd\x07n\x02\x02de\x07u\x02\x02" +
		"eg\x07q\x02\x02fZ\x03\x02\x02\x02f\\\x03\x02\x02\x02f_\x03\x02\x02\x02" +
		"g\x1C\x03\x02\x02\x02hi\x07~\x02\x02is\x07~\x02\x02jk\x07q\x02\x02ks\x07" +
		"t\x02\x02lm\x07q\x02\x02mn\x07t\x02\x02no\x07g\x02\x02op\x07n\x02\x02" +
		"pq\x07u\x02\x02qs\x07g\x02\x02rh\x03\x02\x02\x02rj\x03\x02\x02\x02rl\x03" +
		"\x02\x02\x02s\x1E\x03\x02\x02\x02tu\x07v\x02\x02uv\x07t\x02\x02vw\x07" +
		"w\x02\x02w~\x07g\x02\x02xy\x07h\x02\x02yz\x07c\x02\x02z{\x07n\x02\x02" +
		"{|\x07u\x02\x02|~\x07g\x02\x02}t\x03\x02\x02\x02}x\x03\x02\x02\x02~ \x03" +
		"\x02\x02\x02\x7F\x80\x07@\x02\x02\x80\"\x03\x02\x02\x02\x81\x82\x07>\x02" +
		"\x02\x82$\x03\x02\x02\x02\x83\x84\x07@\x02\x02\x84\x85\x07?\x02\x02\x85" +
		"&\x03\x02\x02\x02\x86\x87\x07>\x02\x02\x87\x88\x07?\x02\x02\x88(\x03\x02" +
		"\x02\x02\x89\x8B\t\x02\x02\x02\x8A\x89\x03\x02\x02\x02\x8B\x8C\x03\x02" +
		"\x02\x02\x8C\x8A\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D*\x03\x02" +
		"\x02\x02\x8E\x90\t\x03\x02\x02\x8F\x8E\x03\x02\x02\x02\x90\x91\x03\x02" +
		"\x02\x02\x91\x8F\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92\x93\x03\x02" +
		"\x02\x02\x93\x94\b\x16\x02\x02\x94,\x03\x02\x02\x02\x95\x96\t\x04\x02" +
		"\x02\x96.\x03\x02\x02\x02\x97\x98\x07x\x02\x02\x98\x99\x07c\x02\x02\x99" +
		"\x9A\x07n\x02\x02\x9A0\x03\x02\x02\x02\x9B\x9C\t\x05\x02\x02\x9C2\x03" +
		"\x02\x02\x02\x9D\x9E\x07w\x02\x02\x9E\xA1\x07:\x02\x02\x9F\xA1\t\x06\x02" +
		"\x02\xA0\x9D\x03\x02\x02\x02\xA0\x9F\x03\x02\x02\x02\xA14\x03\x02\x02" +
		"\x02\xA2\xA6\x07$\x02\x02\xA3\xA5\v\x02\x02\x02\xA4\xA3\x03\x02\x02\x02" +
		"\xA5\xA8\x03\x02\x02\x02\xA6\xA7\x03\x02\x02\x02\xA6\xA4\x03\x02\x02\x02" +
		"\xA7\xA9\x03\x02\x02\x02\xA8\xA6\x03\x02\x02\x02\xA9\xAD\x07*\x02\x02" +
		"\xAA\xAC\v\x02\x02\x02\xAB\xAA\x03\x02\x02\x02\xAC\xAF\x03\x02\x02\x02" +
		"\xAD\xAE\x03\x02\x02\x02\xAD\xAB\x03\x02\x02\x02\xAE\xB0\x03\x02\x02\x02" +
		"\xAF\xAD\x03\x02\x02\x02\xB0\xB4\x07+\x02\x02\xB1\xB3\v\x02\x02\x02\xB2" +
		"\xB1\x03\x02\x02\x02\xB3\xB6\x03\x02\x02\x02\xB4\xB5\x03\x02\x02\x02\xB4" +
		"\xB2\x03\x02\x02\x02\xB5\xB7\x03\x02\x02\x02\xB6\xB4\x03\x02\x02\x02\xB7" +
		"\xB8\x07$\x02\x02\xB86\x03\x02\x02\x02\xB9\xBA\x07k\x02\x02\xBA\xBB\x07" +
		"h\x02\x02\xBB8\x03\x02\x02\x02\xBC\xBD\x07v\x02\x02\xBD\xBE\x07j\x02\x02" +
		"\xBE\xBF\x07g\x02\x02\xBF\xC0\x07p\x02\x02\xC0:\x03\x02\x02\x02\xC1\xC2" +
		"\x07g\x02\x02\xC2\xC3\x07n\x02\x02\xC3\xC4\x07u\x02\x02\xC4\xC5\x07g\x02" +
		"\x02\xC5<\x03\x02\x02\x02\xC6\xC7\x07y\x02\x02\xC7\xC8\x07j\x02\x02\xC8" +
		"\xC9\x07k\x02\x02\xC9\xCA\x07n\x02\x02\xCA\xCB\x07g\x02\x02\xCB>\x03\x02" +
		"\x02\x02\f\x02fr}\x8C\x91\xA0\xA6\xAD\xB4\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

