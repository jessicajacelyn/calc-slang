// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly POW = 5;
	public static readonly MUL = 6;
	public static readonly DIV = 7;
	public static readonly MOD = 8;
	public static readonly ADD = 9;
	public static readonly SUB = 10;
	public static readonly NUMBER = 11;
	public static readonly WHITESPACE = 12;
	public static readonly LETTER = 13;
	public static readonly Stringliteral = 14;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "POW", "MUL", "DIV", "MOD", "ADD", "SUB", 
		"NUMBER", "WHITESPACE", "LETTER", "Stringliteral", "Encodingprefix", "Rawstring",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'='", "':='", "'('", "')'", "'^'", "'*'", "'/'", "'%'", "'+'", 
		"'-'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, "POW", "MUL", "DIV", 
		"MOD", "ADD", "SUB", "NUMBER", "WHITESPACE", "LETTER", "Stringliteral",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x10g\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x03\x02\x03\x02" +
		"\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06" +
		"\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f" +
		"\x06\f:\n\f\r\f\x0E\f;\x03\r\x06\r?\n\r\r\r\x0E\r@\x03\r\x03\r\x03\x0E" +
		"\x03\x0E\x03\x0F\x06\x0FH\n\x0F\r\x0F\x0E\x0FI\x03\x10\x03\x10\x03\x10" +
		"\x05\x10O\n\x10\x03\x11\x03\x11\x07\x11S\n\x11\f\x11\x0E\x11V\v\x11\x03" +
		"\x11\x03\x11\x07\x11Z\n\x11\f\x11\x0E\x11]\v\x11\x03\x11\x03\x11\x07\x11" +
		"a\n\x11\f\x11\x0E\x11d\v\x11\x03\x11\x03\x11\x05T[b\x02\x02\x12\x03\x02" +
		"\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11" +
		"\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10" +
		"\x1F\x02\x02!\x02\x02\x03\x02\x07\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x04" +
		"\x02C\\c|\x05\x022;C\\c|\x05\x02NNWWww\x02k\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x03#\x03\x02\x02\x02\x05%\x03\x02\x02\x02\x07(\x03\x02" +
		"\x02\x02\t*\x03\x02\x02\x02\v,\x03\x02\x02\x02\r.\x03\x02\x02\x02\x0F" +
		"0\x03\x02\x02\x02\x112\x03\x02\x02\x02\x134\x03\x02\x02\x02\x156\x03\x02" +
		"\x02\x02\x179\x03\x02\x02\x02\x19>\x03\x02\x02\x02\x1BD\x03\x02\x02\x02" +
		"\x1DG\x03\x02\x02\x02\x1FN\x03\x02\x02\x02!P\x03\x02\x02\x02#$\x07?\x02" +
		"\x02$\x04\x03\x02\x02\x02%&\x07<\x02\x02&\'\x07?\x02\x02\'\x06\x03\x02" +
		"\x02\x02()\x07*\x02\x02)\b\x03\x02\x02\x02*+\x07+\x02\x02+\n\x03\x02\x02" +
		"\x02,-\x07`\x02\x02-\f\x03\x02\x02\x02./\x07,\x02\x02/\x0E\x03\x02\x02" +
		"\x0201\x071\x02\x021\x10\x03\x02\x02\x0223\x07\'\x02\x023\x12\x03\x02" +
		"\x02\x0245\x07-\x02\x025\x14\x03\x02\x02\x0267\x07/\x02\x027\x16\x03\x02" +
		"\x02\x028:\t\x02\x02\x0298\x03\x02\x02\x02:;\x03\x02\x02\x02;9\x03\x02" +
		"\x02\x02;<\x03\x02\x02\x02<\x18\x03\x02\x02\x02=?\t\x03\x02\x02>=\x03" +
		"\x02\x02\x02?@\x03\x02\x02\x02@>\x03\x02\x02\x02@A\x03\x02\x02\x02AB\x03" +
		"\x02\x02\x02BC\b\r\x02\x02C\x1A\x03\x02\x02\x02DE\t\x04\x02\x02E\x1C\x03" +
		"\x02\x02\x02FH\t\x05\x02\x02GF\x03\x02\x02\x02HI\x03\x02\x02\x02IG\x03" +
		"\x02\x02\x02IJ\x03\x02\x02\x02J\x1E\x03\x02\x02\x02KL\x07w\x02\x02LO\x07" +
		":\x02\x02MO\t\x06\x02\x02NK\x03\x02\x02\x02NM\x03\x02\x02\x02O \x03\x02" +
		"\x02\x02PT\x07$\x02\x02QS\v\x02\x02\x02RQ\x03\x02\x02\x02SV\x03\x02\x02" +
		"\x02TU\x03\x02\x02\x02TR\x03\x02\x02\x02UW\x03\x02\x02\x02VT\x03\x02\x02" +
		"\x02W[\x07*\x02\x02XZ\v\x02\x02\x02YX\x03\x02\x02\x02Z]\x03\x02\x02\x02" +
		"[\\\x03\x02\x02\x02[Y\x03\x02\x02\x02\\^\x03\x02\x02\x02][\x03\x02\x02" +
		"\x02^b\x07+\x02\x02_a\v\x02\x02\x02`_\x03\x02\x02\x02ad\x03\x02\x02\x02" +
		"bc\x03\x02\x02\x02b`\x03\x02\x02\x02ce\x03\x02\x02\x02db\x03\x02\x02\x02" +
		"ef\x07$\x02\x02f\"\x03\x02\x02\x02\n\x02;@INT[b\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

