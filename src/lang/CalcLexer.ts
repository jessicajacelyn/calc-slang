// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly POW = 3;
	public static readonly MUL = 4;
	public static readonly DIV = 5;
	public static readonly MOD = 6;
	public static readonly ADD = 7;
	public static readonly SUB = 8;
	public static readonly EQUAL = 9;
	public static readonly AND = 10;
	public static readonly OR = 11;
	public static readonly NOT = 12;
	public static readonly BOOLEAN = 13;
	public static readonly GT = 14;
	public static readonly LT = 15;
	public static readonly GE = 16;
	public static readonly LE = 17;
	public static readonly NUMBER = 18;
	public static readonly REAL = 19;
	public static readonly WHITESPACE = 20;
	public static readonly LETTER = 21;
	public static readonly LET = 22;
	public static readonly VAL = 23;
	public static readonly LOCAL = 24;
	public static readonly OPAR = 25;
	public static readonly CPAR = 26;
	public static readonly OBRACE = 27;
	public static readonly CBRACE = 28;
	public static readonly DOUBLEQUOTE = 29;
	public static readonly ASSIGNMEMT = 30;
	public static readonly IF = 31;
	public static readonly THEN = 32;
	public static readonly ELSE = 33;
	public static readonly WHILE = 34;
	public static readonly DO = 35;
	public static readonly CHAR = 36;
	public static readonly STRING = 37;
	public static readonly INT = 38;
	public static readonly BOOL = 39;
	public static readonly REALNUM = 40;
	public static readonly Stringliteral = 41;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "POW", "MUL", "DIV", "MOD", "ADD", "SUB", "EQUAL", "AND", 
		"OR", "NOT", "BOOLEAN", "GT", "LT", "GE", "LE", "NUMBER", "REAL", "WHITESPACE", 
		"LETTER", "LET", "VAL", "LOCAL", "OPAR", "CPAR", "OBRACE", "CBRACE", "DOUBLEQUOTE", 
		"ASSIGNMEMT", "IF", "THEN", "ELSE", "WHILE", "DO", "CHAR", "STRING", "INT", 
		"BOOL", "REALNUM", "Stringliteral",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "';'", "','", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'='", 
		undefined, undefined, "'not'", undefined, "'>'", "'<'", "'>='", "'<='", 
		undefined, undefined, undefined, undefined, "'let'", "'val'", "'local val'", 
		"'('", "')'", "'{'", "'}'", "'\"'", "':='", "'if'", "'then'", "'else'", 
		"'while'", "'do'", "'char'", "'string'", "'int'", "'bool'", "'real'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "POW", "MUL", "DIV", "MOD", "ADD", "SUB", 
		"EQUAL", "AND", "OR", "NOT", "BOOLEAN", "GT", "LT", "GE", "LE", "NUMBER", 
		"REAL", "WHITESPACE", "LETTER", "LET", "VAL", "LOCAL", "OPAR", "CPAR", 
		"OBRACE", "CBRACE", "DOUBLEQUOTE", "ASSIGNMEMT", "IF", "THEN", "ELSE", 
		"WHILE", "DO", "CHAR", "STRING", "INT", "BOOL", "REALNUM", "Stringliteral",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02+\u0109\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x03" +
		"\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x05\vt\n\v\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f\x80\n\f" +
		"\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x05\x0E\x8F\n\x0E\x03\x0F\x03\x0F\x03\x10\x03" +
		"\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x06\x13\x9C" +
		"\n\x13\r\x13\x0E\x13\x9D\x03\x14\x06\x14\xA1\n\x14\r\x14\x0E\x14\xA2\x03" +
		"\x14\x03\x14\x06\x14\xA7\n\x14\r\x14\x0E\x14\xA8\x03\x15\x06\x15\xAC\n" +
		"\x15\r\x15\x0E\x15\xAD\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17" +
		"\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19" +
		"\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A" +
		"\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F" +
		"\x03\x1F\x03\x1F\x03 \x03 \x03 \x03!\x03!\x03!\x03!\x03!\x03\"\x03\"\x03" +
		"\"\x03\"\x03\"\x03#\x03#\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03%\x03%" +
		"\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03" +
		"\'\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x03*\x03*\x07*\u0105" +
		"\n*\f*\x0E*\u0108\v*\x02\x02\x02+\x03\x02\x03\x05\x02\x04\x07\x02\x05" +
		"\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17" +
		"\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13" +
		"%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02" +
		"\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02" +
		"$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+\x03\x02\x06\x03\x022;\x05" +
		"\x02\v\f\x0F\x0F\"\"\x04\x02C\\c|\x05\x022;C\\c|\x02\u0112\x02\x03\x03" +
		"\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03" +
		"\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02" +
		"\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02" +
		"\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02" +
		"\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02" +
		"\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02" +
		"\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03" +
		"\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02" +
		"\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02" +
		"=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02" +
		"\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02" +
		"\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03" +
		"\x02\x02\x02\x02S\x03\x02\x02\x02\x03U\x03\x02\x02\x02\x05W\x03\x02\x02" +
		"\x02\x07Y\x03\x02\x02\x02\t[\x03\x02\x02\x02\v]\x03\x02\x02\x02\r_\x03" +
		"\x02\x02\x02\x0Fa\x03\x02\x02\x02\x11c\x03\x02\x02\x02\x13e\x03\x02\x02" +
		"\x02\x15s\x03\x02\x02\x02\x17\x7F\x03\x02\x02\x02\x19\x81\x03\x02\x02" +
		"\x02\x1B\x8E\x03\x02\x02\x02\x1D\x90\x03\x02\x02\x02\x1F\x92\x03\x02\x02" +
		"\x02!\x94\x03\x02\x02\x02#\x97\x03\x02\x02\x02%\x9B\x03\x02\x02\x02\'" +
		"\xA0\x03\x02\x02\x02)\xAB\x03\x02\x02\x02+\xB1\x03\x02\x02\x02-\xB3\x03" +
		"\x02\x02\x02/\xB7\x03\x02\x02\x021\xBB\x03\x02\x02\x023\xC5\x03\x02\x02" +
		"\x025\xC7\x03\x02\x02\x027\xC9\x03\x02\x02\x029\xCB\x03\x02\x02\x02;\xCD" +
		"\x03\x02\x02\x02=\xCF\x03\x02\x02\x02?\xD2\x03\x02\x02\x02A\xD5\x03\x02" +
		"\x02\x02C\xDA\x03\x02\x02\x02E\xDF\x03\x02\x02\x02G\xE5\x03\x02\x02\x02" +
		"I\xE8\x03\x02\x02\x02K\xED\x03\x02\x02\x02M\xF4\x03\x02\x02\x02O\xF8\x03" +
		"\x02\x02\x02Q\xFD\x03\x02\x02\x02S\u0102\x03\x02\x02\x02UV\x07=\x02\x02" +
		"V\x04\x03\x02\x02\x02WX\x07.\x02\x02X\x06\x03\x02\x02\x02YZ\x07`\x02\x02" +
		"Z\b\x03\x02\x02\x02[\\\x07,\x02\x02\\\n\x03\x02\x02\x02]^\x071\x02\x02" +
		"^\f\x03\x02\x02\x02_`\x07\'\x02\x02`\x0E\x03\x02\x02\x02ab\x07-\x02\x02" +
		"b\x10\x03\x02\x02\x02cd\x07/\x02\x02d\x12\x03\x02\x02\x02ef\x07?\x02\x02" +
		"f\x14\x03\x02\x02\x02gh\x07(\x02\x02ht\x07(\x02\x02ij\x07c\x02\x02jk\x07" +
		"p\x02\x02kt\x07f\x02\x02lm\x07c\x02\x02mn\x07p\x02\x02no\x07f\x02\x02" +
		"op\x07c\x02\x02pq\x07n\x02\x02qr\x07u\x02\x02rt\x07q\x02\x02sg\x03\x02" +
		"\x02\x02si\x03\x02\x02\x02sl\x03\x02\x02\x02t\x16\x03\x02\x02\x02uv\x07" +
		"~\x02\x02v\x80\x07~\x02\x02wx\x07q\x02\x02x\x80\x07t\x02\x02yz\x07q\x02" +
		"\x02z{\x07t\x02\x02{|\x07g\x02\x02|}\x07n\x02\x02}~\x07u\x02\x02~\x80" +
		"\x07g\x02\x02\x7Fu\x03\x02\x02\x02\x7Fw\x03\x02\x02\x02\x7Fy\x03\x02\x02" +
		"\x02\x80\x18\x03\x02\x02\x02\x81\x82\x07p\x02\x02\x82\x83\x07q\x02\x02" +
		"\x83\x84\x07v\x02\x02\x84\x1A\x03\x02\x02\x02\x85\x86\x07v\x02\x02\x86" +
		"\x87\x07t\x02\x02\x87\x88\x07w\x02\x02\x88\x8F\x07g\x02\x02\x89\x8A\x07" +
		"h\x02\x02\x8A\x8B\x07c\x02\x02\x8B\x8C\x07n\x02\x02\x8C\x8D\x07u\x02\x02" +
		"\x8D\x8F\x07g\x02\x02\x8E\x85\x03\x02\x02\x02\x8E\x89\x03\x02\x02\x02" +
		"\x8F\x1C\x03\x02\x02\x02\x90\x91\x07@\x02\x02\x91\x1E\x03\x02\x02\x02" +
		"\x92\x93\x07>\x02\x02\x93 \x03\x02\x02\x02\x94\x95\x07@\x02\x02\x95\x96" +
		"\x07?\x02\x02\x96\"\x03\x02\x02\x02\x97\x98\x07>\x02\x02\x98\x99\x07?" +
		"\x02\x02\x99$\x03\x02\x02\x02\x9A\x9C\t\x02\x02\x02\x9B\x9A\x03\x02\x02" +
		"\x02\x9C\x9D\x03\x02\x02\x02\x9D\x9B\x03\x02\x02\x02\x9D\x9E\x03\x02\x02" +
		"\x02\x9E&\x03\x02\x02\x02\x9F\xA1\t\x02\x02\x02\xA0\x9F\x03\x02\x02\x02" +
		"\xA1\xA2\x03\x02\x02\x02\xA2\xA0\x03\x02\x02\x02\xA2\xA3\x03\x02\x02\x02" +
		"\xA3\xA4\x03\x02\x02\x02\xA4\xA6\x070\x02\x02\xA5\xA7\t\x02\x02\x02\xA6" +
		"\xA5\x03\x02\x02\x02\xA7\xA8\x03\x02\x02\x02\xA8\xA6\x03\x02\x02\x02\xA8" +
		"\xA9\x03\x02\x02\x02\xA9(\x03\x02\x02\x02\xAA\xAC\t\x03\x02\x02\xAB\xAA" +
		"\x03\x02\x02\x02\xAC\xAD\x03\x02\x02\x02\xAD\xAB\x03\x02\x02\x02\xAD\xAE" +
		"\x03\x02\x02\x02\xAE\xAF\x03\x02\x02\x02\xAF\xB0\b\x15\x02\x02\xB0*\x03" +
		"\x02\x02\x02\xB1\xB2\t\x04\x02\x02\xB2,\x03\x02\x02\x02\xB3\xB4\x07n\x02" +
		"\x02\xB4\xB5\x07g\x02\x02\xB5\xB6\x07v\x02\x02\xB6.\x03\x02\x02\x02\xB7" +
		"\xB8\x07x\x02\x02\xB8\xB9\x07c\x02\x02\xB9\xBA\x07n\x02\x02\xBA0\x03\x02" +
		"\x02\x02\xBB\xBC\x07n\x02\x02\xBC\xBD\x07q\x02\x02\xBD\xBE\x07e\x02\x02" +
		"\xBE\xBF\x07c\x02\x02\xBF\xC0\x07n\x02\x02\xC0\xC1\x07\"\x02\x02\xC1\xC2" +
		"\x07x\x02\x02\xC2\xC3\x07c\x02\x02\xC3\xC4\x07n\x02\x02\xC42\x03\x02\x02" +
		"\x02\xC5\xC6\x07*\x02\x02\xC64\x03\x02\x02\x02\xC7\xC8\x07+\x02\x02\xC8" +
		"6\x03\x02\x02\x02\xC9\xCA\x07}\x02\x02\xCA8\x03\x02\x02\x02\xCB\xCC\x07" +
		"\x7F\x02\x02\xCC:\x03\x02\x02\x02\xCD\xCE\x07$\x02\x02\xCE<\x03\x02\x02" +
		"\x02\xCF\xD0\x07<\x02\x02\xD0\xD1\x07?\x02\x02\xD1>\x03\x02\x02\x02\xD2" +
		"\xD3\x07k\x02\x02\xD3\xD4\x07h\x02\x02\xD4@\x03\x02\x02\x02\xD5\xD6\x07" +
		"v\x02\x02\xD6\xD7\x07j\x02\x02\xD7\xD8\x07g\x02\x02\xD8\xD9\x07p\x02\x02" +
		"\xD9B\x03\x02\x02\x02\xDA\xDB\x07g\x02\x02\xDB\xDC\x07n\x02\x02\xDC\xDD" +
		"\x07u\x02\x02\xDD\xDE\x07g\x02\x02\xDED\x03\x02\x02\x02\xDF\xE0\x07y\x02" +
		"\x02\xE0\xE1\x07j\x02\x02\xE1\xE2\x07k\x02\x02\xE2\xE3\x07n\x02\x02\xE3" +
		"\xE4\x07g\x02\x02\xE4F\x03\x02\x02\x02\xE5\xE6\x07f\x02\x02\xE6\xE7\x07" +
		"q\x02\x02\xE7H\x03\x02\x02\x02\xE8\xE9\x07e\x02\x02\xE9\xEA\x07j\x02\x02" +
		"\xEA\xEB\x07c\x02\x02\xEB\xEC\x07t\x02\x02\xECJ\x03\x02\x02\x02\xED\xEE" +
		"\x07u\x02\x02\xEE\xEF\x07v\x02\x02\xEF\xF0\x07t\x02\x02\xF0\xF1\x07k\x02" +
		"\x02\xF1\xF2\x07p\x02\x02\xF2\xF3\x07i\x02\x02\xF3L\x03\x02\x02\x02\xF4" +
		"\xF5\x07k\x02\x02\xF5\xF6\x07p\x02\x02\xF6\xF7\x07v\x02\x02\xF7N\x03\x02" +
		"\x02\x02\xF8\xF9\x07d\x02\x02\xF9\xFA\x07q\x02\x02\xFA\xFB\x07q\x02\x02" +
		"\xFB\xFC\x07n\x02\x02\xFCP\x03\x02\x02\x02\xFD\xFE\x07t\x02\x02\xFE\xFF" +
		"\x07g\x02\x02\xFF\u0100\x07c\x02\x02\u0100\u0101\x07n\x02\x02\u0101R\x03" +
		"\x02\x02\x02\u0102\u0106\t\x04\x02\x02\u0103\u0105\t\x05\x02\x02\u0104" +
		"\u0103\x03\x02\x02\x02\u0105\u0108\x03\x02\x02\x02\u0106\u0104\x03\x02" +
		"\x02\x02\u0106\u0107\x03\x02\x02\x02\u0107T\x03\x02\x02\x02\u0108\u0106" +
		"\x03\x02\x02\x02\v\x02s\x7F\x8E\x9D\xA2\xA8\xAD\u0106\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

