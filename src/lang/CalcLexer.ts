// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly POW = 4;
	public static readonly MUL = 5;
	public static readonly DIV = 6;
	public static readonly MOD = 7;
	public static readonly ADD = 8;
	public static readonly SUB = 9;
	public static readonly EQUAL = 10;
	public static readonly AND = 11;
	public static readonly OR = 12;
	public static readonly NOT = 13;
	public static readonly BOOLEAN = 14;
	public static readonly GT = 15;
	public static readonly LT = 16;
	public static readonly GE = 17;
	public static readonly LE = 18;
	public static readonly NUMBER = 19;
	public static readonly REAL = 20;
	public static readonly WHITESPACE = 21;
	public static readonly LETTER = 22;
	public static readonly LET = 23;
	public static readonly VAL = 24;
	public static readonly LOCAL = 25;
	public static readonly OPAR = 26;
	public static readonly CPAR = 27;
	public static readonly OBRACE = 28;
	public static readonly CBRACE = 29;
	public static readonly DOUBLEQUOTE = 30;
	public static readonly Stringliteral = 31;
	public static readonly IF = 32;
	public static readonly THEN = 33;
	public static readonly ELSE = 34;
	public static readonly WHILE = 35;
	public static readonly DO = 36;
	public static readonly CHAR = 37;
	public static readonly STRING = 38;
	public static readonly INT = 39;
	public static readonly BOOL = 40;
	public static readonly REALNUM = 41;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "POW", "MUL", "DIV", "MOD", "ADD", "SUB", "EQUAL", 
		"AND", "OR", "NOT", "BOOLEAN", "GT", "LT", "GE", "LE", "NUMBER", "REAL", 
		"WHITESPACE", "LETTER", "LET", "VAL", "LOCAL", "OPAR", "CPAR", "OBRACE", 
		"CBRACE", "DOUBLEQUOTE", "Stringliteral", "IF", "THEN", "ELSE", "WHILE", 
		"DO", "CHAR", "STRING", "INT", "BOOL", "REALNUM",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':='", "';'", "','", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'='", undefined, undefined, "'not'", undefined, "'>'", "'<'", "'>='", 
		"'<='", undefined, undefined, undefined, undefined, "'let'", "'val'", 
		"'local val'", "'('", "')'", "'{'", "'}'", "'\"'", undefined, "'if'", 
		"'then'", "'else'", "'while'", "'do'", "'char'", "'string'", "'int'", 
		"'bool'", "'real'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "POW", "MUL", "DIV", "MOD", 
		"ADD", "SUB", "EQUAL", "AND", "OR", "NOT", "BOOLEAN", "GT", "LT", "GE", 
		"LE", "NUMBER", "REAL", "WHITESPACE", "LETTER", "LET", "VAL", "LOCAL", 
		"OPAR", "CPAR", "OBRACE", "CBRACE", "DOUBLEQUOTE", "Stringliteral", "IF", 
		"THEN", "ELSE", "WHILE", "DO", "CHAR", "STRING", "INT", "BOOL", "REALNUM",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02+\u0104\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x03" +
		"\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v" +
		"\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x05\fw\n\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x05\r\x83\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\x92\n" +
		"\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03" +
		"\x13\x03\x13\x03\x14\x06\x14\x9F\n\x14\r\x14\x0E\x14\xA0\x03\x15\x06\x15" +
		"\xA4\n\x15\r\x15\x0E\x15\xA5\x03\x15\x03\x15\x06\x15\xAA\n\x15\r\x15\x0E" +
		"\x15\xAB\x03\x16\x06\x16\xAF\n\x16\r\x16\x0E\x16\xB0\x03\x16\x03\x16\x03" +
		"\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03" +
		"\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03" +
		"\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03" +
		"\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03!\x03\"\x03\"\x03\"\x03\"" +
		"\x03\"\x03#\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03$\x03$\x03$\x03%\x03" +
		"%\x03%\x03&\x03&\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"\'\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x03*\x03*\x03*\x03*\x03" +
		"*\x02\x02\x02+\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07" +
		"\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E" +
		"\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02" +
		"\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02" +
		"\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02" +
		"\'M\x02(O\x02)Q\x02*S\x02+\x03\x02\x06\x03\x022;\x05\x02\v\f\x0F\x0F\"" +
		"\"\x04\x02C\\c|\x05\x022;C\\c|\x02\u010C\x02\x03\x03\x02\x02\x02\x02\x05" +
		"\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03" +
		"\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03" +
		"\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03" +
		"\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03" +
		"\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02" +
		"\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02" +
		"\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03" +
		"\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02" +
		"\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02" +
		"?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02" +
		"\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02" +
		"\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03" +
		"\x02\x02\x02\x03U\x03\x02\x02\x02\x05X\x03\x02\x02\x02\x07Z\x03\x02\x02" +
		"\x02\t\\\x03\x02\x02\x02\v^\x03\x02\x02\x02\r`\x03\x02\x02\x02\x0Fb\x03" +
		"\x02\x02\x02\x11d\x03\x02\x02\x02\x13f\x03\x02\x02\x02\x15h\x03\x02\x02" +
		"\x02\x17v\x03\x02\x02\x02\x19\x82\x03\x02\x02\x02\x1B\x84\x03\x02\x02" +
		"\x02\x1D\x91\x03\x02\x02\x02\x1F\x93\x03\x02\x02\x02!\x95\x03\x02\x02" +
		"\x02#\x97\x03\x02\x02\x02%\x9A\x03\x02\x02\x02\'\x9E\x03\x02\x02\x02)" +
		"\xA3\x03\x02\x02\x02+\xAE\x03\x02\x02\x02-\xB4\x03\x02\x02\x02/\xB6\x03" +
		"\x02\x02\x021\xBA\x03\x02\x02\x023\xBE\x03\x02\x02\x025\xC8\x03\x02\x02" +
		"\x027\xCA\x03\x02\x02\x029\xCC\x03\x02\x02\x02;\xCE\x03\x02\x02\x02=\xD0" +
		"\x03\x02\x02\x02?\xD2\x03\x02\x02\x02A\xD4\x03\x02\x02\x02C\xD7\x03\x02" +
		"\x02\x02E\xDC\x03\x02\x02\x02G\xE1\x03\x02\x02\x02I\xE7\x03\x02\x02\x02" +
		"K\xEA\x03\x02\x02\x02M\xEF\x03\x02\x02\x02O\xF6\x03\x02\x02\x02Q\xFA\x03" +
		"\x02\x02\x02S\xFF\x03\x02\x02\x02UV\x07<\x02\x02VW\x07?\x02\x02W\x04\x03" +
		"\x02\x02\x02XY\x07=\x02\x02Y\x06\x03\x02\x02\x02Z[\x07.\x02\x02[\b\x03" +
		"\x02\x02\x02\\]\x07`\x02\x02]\n\x03\x02\x02\x02^_\x07,\x02\x02_\f\x03" +
		"\x02\x02\x02`a\x071\x02\x02a\x0E\x03\x02\x02\x02bc\x07\'\x02\x02c\x10" +
		"\x03\x02\x02\x02de\x07-\x02\x02e\x12\x03\x02\x02\x02fg\x07/\x02\x02g\x14" +
		"\x03\x02\x02\x02hi\x07?\x02\x02i\x16\x03\x02\x02\x02jk\x07(\x02\x02kw" +
		"\x07(\x02\x02lm\x07c\x02\x02mn\x07p\x02\x02nw\x07f\x02\x02op\x07c\x02" +
		"\x02pq\x07p\x02\x02qr\x07f\x02\x02rs\x07c\x02\x02st\x07n\x02\x02tu\x07" +
		"u\x02\x02uw\x07q\x02\x02vj\x03\x02\x02\x02vl\x03\x02\x02\x02vo\x03\x02" +
		"\x02\x02w\x18\x03\x02\x02\x02xy\x07~\x02\x02y\x83\x07~\x02\x02z{\x07q" +
		"\x02\x02{\x83\x07t\x02\x02|}\x07q\x02\x02}~\x07t\x02\x02~\x7F\x07g\x02" +
		"\x02\x7F\x80\x07n\x02\x02\x80\x81\x07u\x02\x02\x81\x83\x07g\x02\x02\x82" +
		"x\x03\x02\x02\x02\x82z\x03\x02\x02\x02\x82|\x03\x02\x02\x02\x83\x1A\x03" +
		"\x02\x02\x02\x84\x85\x07p\x02\x02\x85\x86\x07q\x02\x02\x86\x87\x07v\x02" +
		"\x02\x87\x1C\x03\x02\x02\x02\x88\x89\x07v\x02\x02\x89\x8A\x07t\x02\x02" +
		"\x8A\x8B\x07w\x02\x02\x8B\x92\x07g\x02\x02\x8C\x8D\x07h\x02\x02\x8D\x8E" +
		"\x07c\x02\x02\x8E\x8F\x07n\x02\x02\x8F\x90\x07u\x02\x02\x90\x92\x07g\x02" +
		"\x02\x91\x88\x03\x02\x02\x02\x91\x8C\x03\x02\x02\x02\x92\x1E\x03\x02\x02" +
		"\x02\x93\x94\x07@\x02\x02\x94 \x03\x02\x02\x02\x95\x96\x07>\x02\x02\x96" +
		"\"\x03\x02\x02\x02\x97\x98\x07@\x02\x02\x98\x99\x07?\x02\x02\x99$\x03" +
		"\x02\x02\x02\x9A\x9B\x07>\x02\x02\x9B\x9C\x07?\x02\x02\x9C&\x03\x02\x02" +
		"\x02\x9D\x9F\t\x02\x02\x02\x9E\x9D\x03\x02\x02\x02\x9F\xA0\x03\x02\x02" +
		"\x02\xA0\x9E\x03\x02\x02\x02\xA0\xA1\x03\x02\x02\x02\xA1(\x03\x02\x02" +
		"\x02\xA2\xA4\t\x02\x02\x02\xA3\xA2\x03\x02\x02\x02\xA4\xA5\x03\x02\x02" +
		"\x02\xA5\xA3\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA7\x03\x02\x02" +
		"\x02\xA7\xA9\x070\x02\x02\xA8\xAA\t\x02\x02\x02\xA9\xA8\x03\x02\x02\x02" +
		"\xAA\xAB\x03\x02\x02\x02\xAB\xA9\x03\x02\x02\x02\xAB\xAC\x03\x02\x02\x02" +
		"\xAC*\x03\x02\x02\x02\xAD\xAF\t\x03\x02\x02\xAE\xAD\x03\x02\x02\x02\xAF" +
		"\xB0\x03\x02\x02\x02\xB0\xAE\x03\x02\x02\x02\xB0\xB1\x03\x02\x02\x02\xB1" +
		"\xB2\x03\x02\x02\x02\xB2\xB3\b\x16\x02\x02\xB3,\x03\x02\x02\x02\xB4\xB5" +
		"\t\x04\x02\x02\xB5.\x03\x02\x02\x02\xB6\xB7\x07n\x02\x02\xB7\xB8\x07g" +
		"\x02\x02\xB8\xB9\x07v\x02\x02\xB90\x03\x02\x02\x02\xBA\xBB\x07x\x02\x02" +
		"\xBB\xBC\x07c\x02\x02\xBC\xBD\x07n\x02\x02\xBD2\x03\x02\x02\x02\xBE\xBF" +
		"\x07n\x02\x02\xBF\xC0\x07q\x02\x02\xC0\xC1\x07e\x02\x02\xC1\xC2\x07c\x02" +
		"\x02\xC2\xC3\x07n\x02\x02\xC3\xC4\x07\"\x02\x02\xC4\xC5\x07x\x02\x02\xC5" +
		"\xC6\x07c\x02\x02\xC6\xC7\x07n\x02\x02\xC74\x03\x02\x02\x02\xC8\xC9\x07" +
		"*\x02\x02\xC96\x03\x02\x02\x02\xCA\xCB\x07+\x02\x02\xCB8\x03\x02\x02\x02" +
		"\xCC\xCD\x07}\x02\x02\xCD:\x03\x02\x02\x02\xCE\xCF\x07\x7F\x02\x02\xCF" +
		"<\x03\x02\x02\x02\xD0\xD1\x07$\x02\x02\xD1>\x03\x02\x02\x02\xD2\xD3\t" +
		"\x05\x02\x02\xD3@\x03\x02\x02\x02\xD4\xD5\x07k\x02\x02\xD5\xD6\x07h\x02" +
		"\x02\xD6B\x03\x02\x02\x02\xD7\xD8\x07v\x02\x02\xD8\xD9\x07j\x02\x02\xD9" +
		"\xDA\x07g\x02\x02\xDA\xDB\x07p\x02\x02\xDBD\x03\x02\x02\x02\xDC\xDD\x07" +
		"g\x02\x02\xDD\xDE\x07n\x02\x02\xDE\xDF\x07u\x02\x02\xDF\xE0\x07g\x02\x02" +
		"\xE0F\x03\x02\x02\x02\xE1\xE2\x07y\x02\x02\xE2\xE3\x07j\x02\x02\xE3\xE4" +
		"\x07k\x02\x02\xE4\xE5\x07n\x02\x02\xE5\xE6\x07g\x02\x02\xE6H\x03\x02\x02" +
		"\x02\xE7\xE8\x07f\x02\x02\xE8\xE9\x07q\x02\x02\xE9J\x03\x02\x02\x02\xEA" +
		"\xEB\x07e\x02\x02\xEB\xEC\x07j\x02\x02\xEC\xED\x07c\x02\x02\xED\xEE\x07" +
		"t\x02\x02\xEEL\x03\x02\x02\x02\xEF\xF0\x07u\x02\x02\xF0\xF1\x07v\x02\x02" +
		"\xF1\xF2\x07t\x02\x02\xF2\xF3\x07k\x02\x02\xF3\xF4\x07p\x02\x02\xF4\xF5" +
		"\x07i\x02\x02\xF5N\x03\x02\x02\x02\xF6\xF7\x07k\x02\x02\xF7\xF8\x07p\x02" +
		"\x02\xF8\xF9\x07v\x02\x02\xF9P\x03\x02\x02\x02\xFA\xFB\x07d\x02\x02\xFB" +
		"\xFC\x07q\x02\x02\xFC\xFD\x07q\x02\x02\xFD\xFE\x07n\x02\x02\xFER\x03\x02" +
		"\x02\x02\xFF\u0100\x07t\x02\x02\u0100\u0101\x07g\x02\x02\u0101\u0102\x07" +
		"c\x02\x02\u0102\u0103\x07n\x02\x02\u0103T\x03\x02\x02\x02\n\x02v\x82\x91" +
		"\xA0\xA5\xAB\xB0\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

