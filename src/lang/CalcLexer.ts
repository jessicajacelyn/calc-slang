// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly POW = 3;
	public static readonly MUL = 4;
	public static readonly DIV = 5;
	public static readonly MOD = 6;
	public static readonly ADD = 7;
	public static readonly SUB = 8;
	public static readonly NUMBER = 9;
	public static readonly WHITESPACE = 10;
	public static readonly LETTER = 11;
	public static readonly Stringliteral = 12;
	public static readonly GT = 13;
	public static readonly LT = 14;
	public static readonly GE = 15;
	public static readonly LE = 16;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "POW", "MUL", "DIV", "MOD", "ADD", "SUB", "NUMBER", "WHITESPACE", 
		"LETTER", "Stringliteral", "Encodingprefix", "Schar", "Rawstring", "GT", 
		"LT", "GE", "LE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "')'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", undefined, 
		undefined, undefined, undefined, "'>'", "'<'", "'>='", "'<='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "POW", "MUL", "DIV", "MOD", "ADD", "SUB", 
		"NUMBER", "WHITESPACE", "LETTER", "Stringliteral", "GT", "LT", "GE", "LE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x12\x81\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04" +
		"\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03" +
		"\t\x03\t\x03\n\x06\n;\n\n\r\n\x0E\n<\x03\v\x06\v@\n\v\r\v\x0E\vA\x03\v" +
		"\x03\v\x03\f\x03\f\x03\r\x05\rI\n\r\x03\r\x03\r\x07\rM\n\r\f\r\x0E\rP" +
		"\v\r\x03\r\x03\r\x05\rT\n\r\x03\r\x03\r\x05\rX\n\r\x03\x0E\x03\x0E\x03" +
		"\x0E\x05\x0E]\n\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x07\x10c\n\x10\f\x10" +
		"\x0E\x10f\v\x10\x03\x10\x03\x10\x07\x10j\n\x10\f\x10\x0E\x10m\v\x10\x03" +
		"\x10\x03\x10\x07\x10q\n\x10\f\x10\x0E\x10t\v\x10\x03\x10\x03\x10\x03\x11" +
		"\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14" +
		"\x05dkr\x02\x02\x15\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02" +
		"\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02" +
		"\x0E\x1B\x02\x02\x1D\x02\x02\x1F\x02\x02!\x02\x0F#\x02\x10%\x02\x11\'" +
		"\x02\x12\x03\x02\x07\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x04\x02C\\c|\x05" +
		"\x02NNWWww\x05\x02C\\aac|\x02\x87\x02\x03\x03\x02\x02\x02\x02\x05\x03" +
		"\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02" +
		"\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02" +
		"\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02" +
		"\x02\x02\x02\x19\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02" +
		"\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x03)\x03\x02\x02\x02\x05" +
		"+\x03\x02\x02\x02\x07-\x03\x02\x02\x02\t/\x03\x02\x02\x02\v1\x03\x02\x02" +
		"\x02\r3\x03\x02\x02\x02\x0F5\x03\x02\x02\x02\x117\x03\x02\x02\x02\x13" +
		":\x03\x02\x02\x02\x15?\x03\x02\x02\x02\x17E\x03\x02\x02\x02\x19W\x03\x02" +
		"\x02\x02\x1B\\\x03\x02\x02\x02\x1D^\x03\x02\x02\x02\x1F`\x03\x02\x02\x02" +
		"!w\x03\x02\x02\x02#y\x03\x02\x02\x02%{\x03\x02\x02\x02\'~\x03\x02\x02" +
		"\x02)*\x07*\x02\x02*\x04\x03\x02\x02\x02+,\x07+\x02\x02,\x06\x03\x02\x02" +
		"\x02-.\x07`\x02\x02.\b\x03\x02\x02\x02/0\x07,\x02\x020\n\x03\x02\x02\x02" +
		"12\x071\x02\x022\f\x03\x02\x02\x0234\x07\'\x02\x024\x0E\x03\x02\x02\x02" +
		"56\x07-\x02\x026\x10\x03\x02\x02\x0278\x07/\x02\x028\x12\x03\x02\x02\x02" +
		"9;\t\x02\x02\x02:9\x03\x02\x02\x02;<\x03\x02\x02\x02<:\x03\x02\x02\x02" +
		"<=\x03\x02\x02\x02=\x14\x03\x02\x02\x02>@\t\x03\x02\x02?>\x03\x02\x02" +
		"\x02@A\x03\x02\x02\x02A?\x03\x02\x02\x02AB\x03\x02\x02\x02BC\x03\x02\x02" +
		"\x02CD\b\v\x02\x02D\x16\x03\x02\x02\x02EF\t\x04\x02\x02F\x18\x03\x02\x02" +
		"\x02GI\x05\x1B\x0E\x02HG\x03\x02\x02\x02HI\x03\x02\x02\x02IJ\x03\x02\x02" +
		"\x02JN\x07$\x02\x02KM\x05\x1D\x0F\x02LK\x03\x02\x02\x02MP\x03\x02\x02" +
		"\x02NL\x03\x02\x02\x02NO\x03\x02\x02\x02OQ\x03\x02\x02\x02PN\x03\x02\x02" +
		"\x02QX\x07$\x02\x02RT\x05\x1B\x0E\x02SR\x03\x02\x02\x02ST\x03\x02\x02" +
		"\x02TU\x03\x02\x02\x02UV\x07T\x02\x02VX\x05\x1F\x10\x02WH\x03\x02\x02" +
		"\x02WS\x03\x02\x02\x02X\x1A\x03\x02\x02\x02YZ\x07w\x02\x02Z]\x07:\x02" +
		"\x02[]\t\x05\x02\x02\\Y\x03\x02\x02\x02\\[\x03\x02\x02\x02]\x1C\x03\x02" +
		"\x02\x02^_\t\x06\x02\x02_\x1E\x03\x02\x02\x02`d\x07$\x02\x02ac\v\x02\x02" +
		"\x02ba\x03\x02\x02\x02cf\x03\x02\x02\x02de\x03\x02\x02\x02db\x03\x02\x02" +
		"\x02eg\x03\x02\x02\x02fd\x03\x02\x02\x02gk\x07*\x02\x02hj\v\x02\x02\x02" +
		"ih\x03\x02\x02\x02jm\x03\x02\x02\x02kl\x03\x02\x02\x02ki\x03\x02\x02\x02" +
		"ln\x03\x02\x02\x02mk\x03\x02\x02\x02nr\x07+\x02\x02oq\v\x02\x02\x02po" +
		"\x03\x02\x02\x02qt\x03\x02\x02\x02rs\x03\x02\x02\x02rp\x03\x02\x02\x02" +
		"su\x03\x02\x02\x02tr\x03\x02\x02\x02uv\x07$\x02\x02v \x03\x02\x02\x02" +
		"wx\x07@\x02\x02x\"\x03\x02\x02\x02yz\x07>\x02\x02z$\x03\x02\x02\x02{|" +
		"\x07@\x02\x02|}\x07?\x02\x02}&\x03\x02\x02\x02~\x7F\x07>\x02\x02\x7F\x80" +
		"\x07?\x02\x02\x80(\x03\x02\x02\x02\r\x02<AHNSW\\dkr\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

