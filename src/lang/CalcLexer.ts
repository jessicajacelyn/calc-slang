// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly POW = 4;
	public static readonly MUL = 5;
	public static readonly DIV = 6;
	public static readonly MOD = 7;
	public static readonly ADD = 8;
	public static readonly SUB = 9;
	public static readonly EQUAL = 10;
	public static readonly AND = 11;
	public static readonly OR = 12;
	public static readonly BOOLEAN = 13;
	public static readonly GT = 14;
	public static readonly LT = 15;
	public static readonly GE = 16;
	public static readonly LE = 17;
	public static readonly NUMBER = 18;
	public static readonly WHITESPACE = 19;
	public static readonly LETTER = 20;
	public static readonly VAL = 21;
	public static readonly Stringliteral = 22;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "POW", "MUL", "DIV", "MOD", "ADD", "SUB", "EQUAL", 
		"AND", "OR", "BOOLEAN", "GT", "LT", "GE", "LE", "NUMBER", "WHITESPACE", 
		"LETTER", "VAL", "Stringliteral", "Encodingprefix", "Rawstring",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':='", "'('", "')'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'='", undefined, undefined, undefined, "'>'", "'<'", "'>='", "'<='", 
		undefined, undefined, undefined, "'val'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "POW", "MUL", "DIV", "MOD", 
		"ADD", "SUB", "EQUAL", "AND", "OR", "BOOLEAN", "GT", "LT", "GE", "LE", 
		"NUMBER", "WHITESPACE", "LETTER", "VAL", "Stringliteral",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x18\xAA\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03" +
		"\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b" +
		"\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\fU\n\f\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x05\ra\n\r\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0El\n\x0E" +
		"\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12" +
		"\x03\x12\x03\x13\x06\x13y\n\x13\r\x13\x0E\x13z\x03\x14\x06\x14~\n\x14" +
		"\r\x14\x0E\x14\x7F\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03" +
		"\x16\x03\x16\x03\x17\x06\x17\x8B\n\x17\r\x17\x0E\x17\x8C\x03\x18\x03\x18" +
		"\x03\x18\x05\x18\x92\n\x18\x03\x19\x03\x19\x07\x19\x96\n\x19\f\x19\x0E" +
		"\x19\x99\v\x19\x03\x19\x03\x19\x07\x19\x9D\n\x19\f\x19\x0E\x19\xA0\v\x19" +
		"\x03\x19\x03\x19\x07\x19\xA4\n\x19\f\x19\x0E\x19\xA7\v\x19\x03\x19\x03" +
		"\x19\x05\x97\x9E\xA5\x02\x02\x1A\x03\x02\x03\x05\x02\x04\x07\x02\x05\t" +
		"\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17" +
		"\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13" +
		"%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x021\x02\x02\x03\x02" +
		"\x07\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x04\x02C\\c|\x05\x022;C\\c|\x05" +
		"\x02NNWWww\x02\xB3\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02" +
		"\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r" +
		"\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13" +
		"\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19" +
		"\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F" +
		"\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02" +
		"\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02" +
		"\x02-\x03\x02\x02\x02\x033\x03\x02\x02\x02\x056\x03\x02\x02\x02\x078\x03" +
		"\x02\x02\x02\t:\x03\x02\x02\x02\v<\x03\x02\x02\x02\r>\x03\x02\x02\x02" +
		"\x0F@\x03\x02\x02\x02\x11B\x03\x02\x02\x02\x13D\x03\x02\x02\x02\x15F\x03" +
		"\x02\x02\x02\x17T\x03\x02\x02\x02\x19`\x03\x02\x02\x02\x1Bk\x03\x02\x02" +
		"\x02\x1Dm\x03\x02\x02\x02\x1Fo\x03\x02\x02\x02!q\x03\x02\x02\x02#t\x03" +
		"\x02\x02\x02%x\x03\x02\x02\x02\'}\x03\x02\x02\x02)\x83\x03\x02\x02\x02" +
		"+\x85\x03\x02\x02\x02-\x8A\x03\x02\x02\x02/\x91\x03\x02\x02\x021\x93\x03" +
		"\x02\x02\x0234\x07<\x02\x0245\x07?\x02\x025\x04\x03\x02\x02\x0267\x07" +
		"*\x02\x027\x06\x03\x02\x02\x0289\x07+\x02\x029\b\x03\x02\x02\x02:;\x07" +
		"`\x02\x02;\n\x03\x02\x02\x02<=\x07,\x02\x02=\f\x03\x02\x02\x02>?\x071" +
		"\x02\x02?\x0E\x03\x02\x02\x02@A\x07\'\x02\x02A\x10\x03\x02\x02\x02BC\x07" +
		"-\x02\x02C\x12\x03\x02\x02\x02DE\x07/\x02\x02E\x14\x03\x02\x02\x02FG\x07" +
		"?\x02\x02G\x16\x03\x02\x02\x02HI\x07(\x02\x02IU\x07(\x02\x02JK\x07c\x02" +
		"\x02KL\x07p\x02\x02LU\x07f\x02\x02MN\x07c\x02\x02NO\x07p\x02\x02OP\x07" +
		"f\x02\x02PQ\x07c\x02\x02QR\x07n\x02\x02RS\x07u\x02\x02SU\x07q\x02\x02" +
		"TH\x03\x02\x02\x02TJ\x03\x02\x02\x02TM\x03\x02\x02\x02U\x18\x03\x02\x02" +
		"\x02VW\x07~\x02\x02Wa\x07~\x02\x02XY\x07q\x02\x02Ya\x07t\x02\x02Z[\x07" +
		"q\x02\x02[\\\x07t\x02\x02\\]\x07g\x02\x02]^\x07n\x02\x02^_\x07u\x02\x02" +
		"_a\x07g\x02\x02`V\x03\x02\x02\x02`X\x03\x02\x02\x02`Z\x03\x02\x02\x02" +
		"a\x1A\x03\x02\x02\x02bc\x07v\x02\x02cd\x07t\x02\x02de\x07w\x02\x02el\x07" +
		"g\x02\x02fg\x07h\x02\x02gh\x07c\x02\x02hi\x07n\x02\x02ij\x07u\x02\x02" +
		"jl\x07g\x02\x02kb\x03\x02\x02\x02kf\x03\x02\x02\x02l\x1C\x03\x02\x02\x02" +
		"mn\x07@\x02\x02n\x1E\x03\x02\x02\x02op\x07>\x02\x02p \x03\x02\x02\x02" +
		"qr\x07@\x02\x02rs\x07?\x02\x02s\"\x03\x02\x02\x02tu\x07>\x02\x02uv\x07" +
		"?\x02\x02v$\x03\x02\x02\x02wy\t\x02\x02\x02xw\x03\x02\x02\x02yz\x03\x02" +
		"\x02\x02zx\x03\x02\x02\x02z{\x03\x02\x02\x02{&\x03\x02\x02\x02|~\t\x03" +
		"\x02\x02}|\x03\x02\x02\x02~\x7F\x03\x02\x02\x02\x7F}\x03\x02\x02\x02\x7F" +
		"\x80\x03\x02\x02\x02\x80\x81\x03\x02\x02\x02\x81\x82\b\x14\x02\x02\x82" +
		"(\x03\x02\x02\x02\x83\x84\t\x04\x02\x02\x84*\x03\x02\x02\x02\x85\x86\x07" +
		"x\x02\x02\x86\x87\x07c\x02\x02\x87\x88\x07n\x02\x02\x88,\x03\x02\x02\x02" +
		"\x89\x8B\t\x05\x02\x02\x8A\x89\x03\x02\x02\x02\x8B\x8C\x03\x02\x02\x02" +
		"\x8C\x8A\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D.\x03\x02\x02\x02" +
		"\x8E\x8F\x07w\x02\x02\x8F\x92\x07:\x02\x02\x90\x92\t\x06\x02\x02\x91\x8E" +
		"\x03\x02\x02\x02\x91\x90\x03\x02\x02\x02\x920\x03\x02\x02\x02\x93\x97" +
		"\x07$\x02\x02\x94\x96\v\x02\x02\x02\x95\x94\x03\x02\x02\x02\x96\x99\x03" +
		"\x02\x02\x02\x97\x98\x03\x02\x02\x02\x97\x95\x03\x02\x02\x02\x98\x9A\x03" +
		"\x02\x02\x02\x99\x97\x03\x02\x02\x02\x9A\x9E\x07*\x02\x02\x9B\x9D\v\x02" +
		"\x02\x02\x9C\x9B\x03\x02\x02\x02\x9D\xA0\x03\x02\x02\x02\x9E\x9F\x03\x02" +
		"\x02\x02\x9E\x9C\x03\x02\x02\x02\x9F\xA1\x03\x02\x02\x02\xA0\x9E\x03\x02" +
		"\x02\x02\xA1\xA5\x07+\x02\x02\xA2\xA4\v\x02\x02\x02\xA3\xA2\x03\x02\x02" +
		"\x02\xA4\xA7\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA5\xA3\x03\x02\x02" +
		"\x02\xA6\xA8\x03\x02\x02\x02\xA7\xA5\x03\x02\x02\x02\xA8\xA9\x07$\x02" +
		"\x02\xA92\x03\x02\x02\x02\r\x02T`kz\x7F\x8C\x91\x97\x9E\xA5\x03\b\x02" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

