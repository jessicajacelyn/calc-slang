// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly POW = 4;
	public static readonly MUL = 5;
	public static readonly DIV = 6;
	public static readonly MOD = 7;
	public static readonly ADD = 8;
	public static readonly SUB = 9;
	public static readonly EQUAL = 10;
	public static readonly AND = 11;
	public static readonly OR = 12;
	public static readonly NOT = 13;
	public static readonly BOOLEAN = 14;
	public static readonly GT = 15;
	public static readonly LT = 16;
	public static readonly GE = 17;
	public static readonly LE = 18;
	public static readonly NUMBER = 19;
	public static readonly REAL = 20;
	public static readonly WHITESPACE = 21;
	public static readonly LETTER = 22;
	public static readonly LET = 23;
	public static readonly IN = 24;
	public static readonly END = 25;
	public static readonly VAL = 26;
	public static readonly LOCAL = 27;
	public static readonly OPAR = 28;
	public static readonly CPAR = 29;
	public static readonly OBRACE = 30;
	public static readonly CBRACE = 31;
	public static readonly DOUBLEQUOTE = 32;
	public static readonly IF = 33;
	public static readonly THEN = 34;
	public static readonly ELSE = 35;
	public static readonly WHILE = 36;
	public static readonly DO = 37;
	public static readonly CHAR = 38;
	public static readonly STRING = 39;
	public static readonly INT = 40;
	public static readonly BOOL = 41;
	public static readonly REALNUM = 42;
	public static readonly Stringliteral = 43;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "POW", "MUL", "DIV", "MOD", "ADD", "SUB", "EQUAL", 
		"AND", "OR", "NOT", "BOOLEAN", "GT", "LT", "GE", "LE", "NUMBER", "REAL", 
		"WHITESPACE", "LETTER", "LET", "IN", "END", "VAL", "LOCAL", "OPAR", "CPAR", 
		"OBRACE", "CBRACE", "DOUBLEQUOTE", "IF", "THEN", "ELSE", "WHILE", "DO", 
		"CHAR", "STRING", "INT", "BOOL", "REALNUM", "Stringliteral",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':='", "';'", "','", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'='", undefined, undefined, "'not'", undefined, "'>'", "'<'", "'>='", 
		"'<='", undefined, undefined, undefined, undefined, "'let'", "'in'", "'end'", 
		"'val'", "'local val'", "'('", "')'", "'{'", "'}'", "'\"'", "'if'", "'then'", 
		"'else'", "'while'", "'do'", "'char'", "'string'", "'int'", "'bool'", 
		"'real'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "POW", "MUL", "DIV", "MOD", 
		"ADD", "SUB", "EQUAL", "AND", "OR", "NOT", "BOOLEAN", "GT", "LT", "GE", 
		"LE", "NUMBER", "REAL", "WHITESPACE", "LETTER", "LET", "IN", "END", "VAL", 
		"LOCAL", "OPAR", "CPAR", "OBRACE", "CBRACE", "DOUBLEQUOTE", "IF", "THEN", 
		"ELSE", "WHILE", "DO", "CHAR", "STRING", "INT", "BOOL", "REALNUM", "Stringliteral",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02-\u0114\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03" +
		"\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x05\f{\n\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x05\r\x87\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05" +
		"\x0F\x96\n\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12" +
		"\x03\x13\x03\x13\x03\x13\x03\x14\x06\x14\xA3\n\x14\r\x14\x0E\x14\xA4\x03" +
		"\x15\x06\x15\xA8\n\x15\r\x15\x0E\x15\xA9\x03\x15\x03\x15\x06\x15\xAE\n" +
		"\x15\r\x15\x0E\x15\xAF\x03\x16\x06\x16\xB3\n\x16\r\x16\x0E\x16\xB4\x03" +
		"\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03" +
		"\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03" +
		"\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03" +
		"\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03" +
		" \x03!\x03!\x03\"\x03\"\x03\"\x03#\x03#\x03#\x03#\x03#\x03$\x03$\x03$" +
		"\x03$\x03$\x03%\x03%\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03\'\x03\'\x03" +
		"\'\x03\'\x03\'\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03)" +
		"\x03*\x03*\x03*\x03*\x03*\x03+\x03+\x03+\x03+\x03+\x03,\x03,\x07,\u0110" +
		"\n,\f,\x0E,\u0113\v,\x02\x02\x02-\x03\x02\x03\x05\x02\x04\x07\x02\x05" +
		"\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17" +
		"\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13" +
		"%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02" +
		"\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02" +
		"$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+U\x02,W\x02-\x03\x02\x06\x03" +
		"\x022;\x05\x02\v\f\x0F\x0F\"\"\x04\x02C\\c|\x05\x022;C\\c|\x02\u011D\x02" +
		"\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02" +
		"\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F" +
		"\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15" +
		"\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B" +
		"\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!" +
		"\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02" +
		"\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02" +
		"\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03" +
		"\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02" +
		"\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02" +
		"C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02" +
		"\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02" +
		"\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03" +
		"\x02\x02\x02\x03Y\x03\x02\x02\x02\x05\\\x03\x02\x02\x02\x07^\x03\x02\x02" +
		"\x02\t`\x03\x02\x02\x02\vb\x03\x02\x02\x02\rd\x03\x02\x02\x02\x0Ff\x03" +
		"\x02\x02\x02\x11h\x03\x02\x02\x02\x13j\x03\x02\x02\x02\x15l\x03\x02\x02" +
		"\x02\x17z\x03\x02\x02\x02\x19\x86\x03\x02\x02\x02\x1B\x88\x03\x02\x02" +
		"\x02\x1D\x95\x03\x02\x02\x02\x1F\x97\x03\x02\x02\x02!\x99\x03\x02\x02" +
		"\x02#\x9B\x03\x02\x02\x02%\x9E\x03\x02\x02\x02\'\xA2\x03\x02\x02\x02)" +
		"\xA7\x03\x02\x02\x02+\xB2\x03\x02\x02\x02-\xB8\x03\x02\x02\x02/\xBA\x03" +
		"\x02\x02\x021\xBE\x03\x02\x02\x023\xC1\x03\x02\x02\x025\xC5\x03\x02\x02" +
		"\x027\xC9\x03\x02\x02\x029\xD3\x03\x02\x02\x02;\xD5\x03\x02\x02\x02=\xD7" +
		"\x03\x02\x02\x02?\xD9\x03\x02\x02\x02A\xDB\x03\x02\x02\x02C\xDD\x03\x02" +
		"\x02\x02E\xE0\x03\x02\x02\x02G\xE5\x03\x02\x02\x02I\xEA\x03\x02\x02\x02" +
		"K\xF0\x03\x02\x02\x02M\xF3\x03\x02\x02\x02O\xF8\x03\x02\x02\x02Q\xFF\x03" +
		"\x02\x02\x02S\u0103\x03\x02\x02\x02U\u0108\x03\x02\x02\x02W\u010D\x03" +
		"\x02\x02\x02YZ\x07<\x02\x02Z[\x07?\x02\x02[\x04\x03\x02\x02\x02\\]\x07" +
		"=\x02\x02]\x06\x03\x02\x02\x02^_\x07.\x02\x02_\b\x03\x02\x02\x02`a\x07" +
		"`\x02\x02a\n\x03\x02\x02\x02bc\x07,\x02\x02c\f\x03\x02\x02\x02de\x071" +
		"\x02\x02e\x0E\x03\x02\x02\x02fg\x07\'\x02\x02g\x10\x03\x02\x02\x02hi\x07" +
		"-\x02\x02i\x12\x03\x02\x02\x02jk\x07/\x02\x02k\x14\x03\x02\x02\x02lm\x07" +
		"?\x02\x02m\x16\x03\x02\x02\x02no\x07(\x02\x02o{\x07(\x02\x02pq\x07c\x02" +
		"\x02qr\x07p\x02\x02r{\x07f\x02\x02st\x07c\x02\x02tu\x07p\x02\x02uv\x07" +
		"f\x02\x02vw\x07c\x02\x02wx\x07n\x02\x02xy\x07u\x02\x02y{\x07q\x02\x02" +
		"zn\x03\x02\x02\x02zp\x03\x02\x02\x02zs\x03\x02\x02\x02{\x18\x03\x02\x02" +
		"\x02|}\x07~\x02\x02}\x87\x07~\x02\x02~\x7F\x07q\x02\x02\x7F\x87\x07t\x02" +
		"\x02\x80\x81\x07q\x02\x02\x81\x82\x07t\x02\x02\x82\x83\x07g\x02\x02\x83" +
		"\x84\x07n\x02\x02\x84\x85\x07u\x02\x02\x85\x87\x07g\x02\x02\x86|\x03\x02" +
		"\x02\x02\x86~\x03\x02\x02\x02\x86\x80\x03\x02\x02\x02\x87\x1A\x03\x02" +
		"\x02\x02\x88\x89\x07p\x02\x02\x89\x8A\x07q\x02\x02\x8A\x8B\x07v\x02\x02" +
		"\x8B\x1C\x03\x02\x02\x02\x8C\x8D\x07v\x02\x02\x8D\x8E\x07t\x02\x02\x8E" +
		"\x8F\x07w\x02\x02\x8F\x96\x07g\x02\x02\x90\x91\x07h\x02\x02\x91\x92\x07" +
		"c\x02\x02\x92\x93\x07n\x02\x02\x93\x94\x07u\x02\x02\x94\x96\x07g\x02\x02" +
		"\x95\x8C\x03\x02\x02\x02\x95\x90\x03\x02\x02\x02\x96\x1E\x03\x02\x02\x02" +
		"\x97\x98\x07@\x02\x02\x98 \x03\x02\x02\x02\x99\x9A\x07>\x02\x02\x9A\"" +
		"\x03\x02\x02\x02\x9B\x9C\x07@\x02\x02\x9C\x9D\x07?\x02\x02\x9D$\x03\x02" +
		"\x02\x02\x9E\x9F\x07>\x02\x02\x9F\xA0\x07?\x02\x02\xA0&\x03\x02\x02\x02" +
		"\xA1\xA3\t\x02\x02\x02\xA2\xA1\x03\x02\x02\x02\xA3\xA4\x03\x02\x02\x02" +
		"\xA4\xA2\x03\x02\x02\x02\xA4\xA5\x03\x02\x02\x02\xA5(\x03\x02\x02\x02" +
		"\xA6\xA8\t\x02\x02\x02\xA7\xA6\x03\x02\x02\x02\xA8\xA9\x03\x02\x02\x02" +
		"\xA9\xA7\x03\x02\x02\x02\xA9\xAA\x03\x02\x02\x02\xAA\xAB\x03\x02\x02\x02" +
		"\xAB\xAD\x070\x02\x02\xAC\xAE\t\x02\x02\x02\xAD\xAC\x03\x02\x02\x02\xAE" +
		"\xAF\x03\x02\x02\x02\xAF\xAD\x03\x02\x02\x02\xAF\xB0\x03\x02\x02\x02\xB0" +
		"*\x03\x02\x02\x02\xB1\xB3\t\x03\x02\x02\xB2\xB1\x03\x02\x02\x02\xB3\xB4" +
		"\x03\x02\x02\x02\xB4\xB2\x03\x02\x02\x02\xB4\xB5\x03\x02\x02\x02\xB5\xB6" +
		"\x03\x02\x02\x02\xB6\xB7\b\x16\x02\x02\xB7,\x03\x02\x02\x02\xB8\xB9\t" +
		"\x04\x02\x02\xB9.\x03\x02\x02\x02\xBA\xBB\x07n\x02\x02\xBB\xBC\x07g\x02" +
		"\x02\xBC\xBD\x07v\x02\x02\xBD0\x03\x02\x02\x02\xBE\xBF\x07k\x02\x02\xBF" +
		"\xC0\x07p\x02\x02\xC02\x03\x02\x02\x02\xC1\xC2\x07g\x02\x02\xC2\xC3\x07" +
		"p\x02\x02\xC3\xC4\x07f\x02\x02\xC44\x03\x02\x02\x02\xC5\xC6\x07x\x02\x02" +
		"\xC6\xC7\x07c\x02\x02\xC7\xC8\x07n\x02\x02\xC86\x03\x02\x02\x02\xC9\xCA" +
		"\x07n\x02\x02\xCA\xCB\x07q\x02\x02\xCB\xCC\x07e\x02\x02\xCC\xCD\x07c\x02" +
		"\x02\xCD\xCE\x07n\x02\x02\xCE\xCF\x07\"\x02\x02\xCF\xD0\x07x\x02\x02\xD0" +
		"\xD1\x07c\x02\x02\xD1\xD2\x07n\x02\x02\xD28\x03\x02\x02\x02\xD3\xD4\x07" +
		"*\x02\x02\xD4:\x03\x02\x02\x02\xD5\xD6\x07+\x02\x02\xD6<\x03\x02\x02\x02" +
		"\xD7\xD8\x07}\x02\x02\xD8>\x03\x02\x02\x02\xD9\xDA\x07\x7F\x02\x02\xDA" +
		"@\x03\x02\x02\x02\xDB\xDC\x07$\x02\x02\xDCB\x03\x02\x02\x02\xDD\xDE\x07" +
		"k\x02\x02\xDE\xDF\x07h\x02\x02\xDFD\x03\x02\x02\x02\xE0\xE1\x07v\x02\x02" +
		"\xE1\xE2\x07j\x02\x02\xE2\xE3\x07g\x02\x02\xE3\xE4\x07p\x02\x02\xE4F\x03" +
		"\x02\x02\x02\xE5\xE6\x07g\x02\x02\xE6\xE7\x07n\x02\x02\xE7\xE8\x07u\x02" +
		"\x02\xE8\xE9\x07g\x02\x02\xE9H\x03\x02\x02\x02\xEA\xEB\x07y\x02\x02\xEB" +
		"\xEC\x07j\x02\x02\xEC\xED\x07k\x02\x02\xED\xEE\x07n\x02\x02\xEE\xEF\x07" +
		"g\x02\x02\xEFJ\x03\x02\x02\x02\xF0\xF1\x07f\x02\x02\xF1\xF2\x07q\x02\x02" +
		"\xF2L\x03\x02\x02\x02\xF3\xF4\x07e\x02\x02\xF4\xF5\x07j\x02\x02\xF5\xF6" +
		"\x07c\x02\x02\xF6\xF7\x07t\x02\x02\xF7N\x03\x02\x02\x02\xF8\xF9\x07u\x02" +
		"\x02\xF9\xFA\x07v\x02\x02\xFA\xFB\x07t\x02\x02\xFB\xFC\x07k\x02\x02\xFC" +
		"\xFD\x07p\x02\x02\xFD\xFE\x07i\x02\x02\xFEP\x03\x02\x02\x02\xFF\u0100" +
		"\x07k\x02\x02\u0100\u0101\x07p\x02\x02\u0101\u0102\x07v\x02\x02\u0102" +
		"R\x03\x02\x02\x02\u0103\u0104\x07d\x02\x02\u0104\u0105\x07q\x02\x02\u0105" +
		"\u0106\x07q\x02\x02\u0106\u0107\x07n\x02\x02\u0107T\x03\x02\x02\x02\u0108" +
		"\u0109\x07t\x02\x02\u0109\u010A\x07g\x02\x02\u010A\u010B\x07c\x02\x02" +
		"\u010B\u010C\x07n\x02\x02\u010CV\x03\x02\x02\x02\u010D\u0111\t\x04\x02" +
		"\x02\u010E\u0110\t\x05\x02\x02\u010F\u010E\x03\x02\x02\x02\u0110\u0113" +
		"\x03\x02\x02\x02\u0111\u010F\x03\x02\x02\x02\u0111\u0112\x03\x02\x02\x02" +
		"\u0112X\x03\x02\x02\x02\u0113\u0111\x03\x02\x02\x02\v\x02z\x86\x95\xA4" +
		"\xA9\xAF\xB4\u0111\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

