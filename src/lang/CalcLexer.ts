// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly POW = 7;
	public static readonly MUL = 8;
	public static readonly DIV = 9;
	public static readonly MOD = 10;
	public static readonly ADD = 11;
	public static readonly SUB = 12;
	public static readonly EQUAL = 13;
	public static readonly NUMBER = 14;
	public static readonly WHITESPACE = 15;
	public static readonly LETTER = 16;
	public static readonly Stringliteral = 17;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "POW", "MUL", "DIV", "MOD", 
		"ADD", "SUB", "EQUAL", "NUMBER", "WHITESPACE", "LETTER", "Stringliteral", 
		"Encodingprefix", "Rawstring",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':='", "';'", "'('", "')'", "'let'", "'val'", "'^'", "'*'", 
		"'/'", "'%'", "'+'", "'-'", "'='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		"POW", "MUL", "DIV", "MOD", "ADD", "SUB", "EQUAL", "NUMBER", "WHITESPACE", 
		"LETTER", "Stringliteral",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x13t\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03" +
		"\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03" +
		"\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x06\x0FJ\n\x0F\r\x0F\x0E" +
		"\x0FK\x03\x10\x06\x10O\n\x10\r\x10\x0E\x10P\x03\x10\x03\x10\x03\x11\x03" +
		"\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x05\x13\\\n\x13\x03\x14\x03" +
		"\x14\x07\x14`\n\x14\f\x14\x0E\x14c\v\x14\x03\x14\x03\x14\x07\x14g\n\x14" +
		"\f\x14\x0E\x14j\v\x14\x03\x14\x03\x14\x07\x14n\n\x14\f\x14\x0E\x14q\v" +
		"\x14\x03\x14\x03\x14\x05aho\x02\x02\x15\x03\x02\x03\x05\x02\x04\x07\x02" +
		"\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02" +
		"\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12" +
		"#\x02\x13%\x02\x02\'\x02\x02\x03\x02\x07\x03\x022;\x05\x02\v\f\x0F\x0F" +
		"\"\"\x04\x02C\\c|\x05\x022;C\\c|\x05\x02NNWWww\x02w\x02\x03\x03\x02\x02" +
		"\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02" +
		"\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02" +
		"\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02" +
		"\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02" +
		"\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02" +
		"\x02#\x03\x02\x02\x02\x03)\x03\x02\x02\x02\x05,\x03\x02\x02\x02\x07.\x03" +
		"\x02\x02\x02\t0\x03\x02\x02\x02\v2\x03\x02\x02\x02\r6\x03\x02\x02\x02" +
		"\x0F:\x03\x02\x02\x02\x11<\x03\x02\x02\x02\x13>\x03\x02\x02\x02\x15@\x03" +
		"\x02\x02\x02\x17B\x03\x02\x02\x02\x19D\x03\x02\x02\x02\x1BF\x03\x02\x02" +
		"\x02\x1DI\x03\x02\x02\x02\x1FN\x03\x02\x02\x02!T\x03\x02\x02\x02#V\x03" +
		"\x02\x02\x02%[\x03\x02\x02\x02\']\x03\x02\x02\x02)*\x07<\x02\x02*+\x07" +
		"?\x02\x02+\x04\x03\x02\x02\x02,-\x07=\x02\x02-\x06\x03\x02\x02\x02./\x07" +
		"*\x02\x02/\b\x03\x02\x02\x0201\x07+\x02\x021\n\x03\x02\x02\x0223\x07n" +
		"\x02\x0234\x07g\x02\x0245\x07v\x02\x025\f\x03\x02\x02\x0267\x07x\x02\x02" +
		"78\x07c\x02\x0289\x07n\x02\x029\x0E\x03\x02\x02\x02:;\x07`\x02\x02;\x10" +
		"\x03\x02\x02\x02<=\x07,\x02\x02=\x12\x03\x02\x02\x02>?\x071\x02\x02?\x14" +
		"\x03\x02\x02\x02@A\x07\'\x02\x02A\x16\x03\x02\x02\x02BC\x07-\x02\x02C" +
		"\x18\x03\x02\x02\x02DE\x07/\x02\x02E\x1A\x03\x02\x02\x02FG\x07?\x02\x02" +
		"G\x1C\x03\x02\x02\x02HJ\t\x02\x02\x02IH\x03\x02\x02\x02JK\x03\x02\x02" +
		"\x02KI\x03\x02\x02\x02KL\x03\x02\x02\x02L\x1E\x03\x02\x02\x02MO\t\x03" +
		"\x02\x02NM\x03\x02\x02\x02OP\x03\x02\x02\x02PN\x03\x02\x02\x02PQ\x03\x02" +
		"\x02\x02QR\x03\x02\x02\x02RS\b\x10\x02\x02S \x03\x02\x02\x02TU\t\x04\x02" +
		"\x02U\"\x03\x02\x02\x02VW\t\x05\x02\x02W$\x03\x02\x02\x02XY\x07w\x02\x02" +
		"Y\\\x07:\x02\x02Z\\\t\x06\x02\x02[X\x03\x02\x02\x02[Z\x03\x02\x02\x02" +
		"\\&\x03\x02\x02\x02]a\x07$\x02\x02^`\v\x02\x02\x02_^\x03\x02\x02\x02`" +
		"c\x03\x02\x02\x02ab\x03\x02\x02\x02a_\x03\x02\x02\x02bd\x03\x02\x02\x02" +
		"ca\x03\x02\x02\x02dh\x07*\x02\x02eg\v\x02\x02\x02fe\x03\x02\x02\x02gj" +
		"\x03\x02\x02\x02hi\x03\x02\x02\x02hf\x03\x02\x02\x02ik\x03\x02\x02\x02" +
		"jh\x03\x02\x02\x02ko\x07+\x02\x02ln\v\x02\x02\x02ml\x03\x02\x02\x02nq" +
		"\x03\x02\x02\x02op\x03\x02\x02\x02om\x03\x02\x02\x02pr\x03\x02\x02\x02" +
		"qo\x03\x02\x02\x02rs\x07$\x02\x02s(\x03\x02\x02\x02\t\x02KP[aho\x03\b" +
		"\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

