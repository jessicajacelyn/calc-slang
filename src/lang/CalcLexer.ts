// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly POW = 6;
	public static readonly MUL = 7;
	public static readonly DIV = 8;
	public static readonly MOD = 9;
	public static readonly ADD = 10;
	public static readonly SUB = 11;
	public static readonly EQUAL = 12;
	public static readonly AND = 13;
	public static readonly OR = 14;
	public static readonly NOT = 15;
	public static readonly BOOLEAN = 16;
	public static readonly GT = 17;
	public static readonly LT = 18;
	public static readonly GE = 19;
	public static readonly LE = 20;
	public static readonly NUMBER = 21;
	public static readonly REAL = 22;
	public static readonly WHITESPACE = 23;
	public static readonly LETTER = 24;
	public static readonly VAL = 25;
	public static readonly LOCAL = 26;
	public static readonly Stringliteral = 27;
	public static readonly IF = 28;
	public static readonly THEN = 29;
	public static readonly ELSE = 30;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "POW", "MUL", "DIV", "MOD", "ADD", 
		"SUB", "EQUAL", "AND", "OR", "NOT", "BOOLEAN", "GT", "LT", "GE", "LE", 
		"NUMBER", "REAL", "WHITESPACE", "LETTER", "VAL", "LOCAL", "Stringliteral", 
		"Encodingprefix", "Rawstring", "IF", "THEN", "ELSE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':='", "';'", "'('", "')'", "'let'", "'^'", "'*'", "'/'", 
		"'%'", "'+'", "'-'", "'='", undefined, undefined, "'not'", undefined, 
		"'>'", "'<'", "'>='", "'<='", undefined, undefined, undefined, undefined, 
		"'val'", "'local val'", undefined, "'if'", "'then'", "'else'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, "POW", 
		"MUL", "DIV", "MOD", "ADD", "SUB", "EQUAL", "AND", "OR", "NOT", "BOOLEAN", 
		"GT", "LT", "GE", "LE", "NUMBER", "REAL", "WHITESPACE", "LETTER", "VAL", 
		"LOCAL", "Stringliteral", "IF", "THEN", "ELSE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02 \xE3\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x03\x02\x03" +
		"\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03" +
		"\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E" +
		"k\n\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x0F\x05\x0Fw\n\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11" +
		"\x86\n\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03" +
		"\x15\x03\x15\x03\x15\x03\x16\x06\x16\x93\n\x16\r\x16\x0E\x16\x94\x03\x17" +
		"\x06\x17\x98\n\x17\r\x17\x0E\x17\x99\x03\x17\x03\x17\x06\x17\x9E\n\x17" +
		"\r\x17\x0E\x17\x9F\x03\x18\x06\x18\xA3\n\x18\r\x18\x0E\x18\xA4\x03\x18" +
		"\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B" +
		"\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1C" +
		"\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x05\x1D\xBE\n\x1D\x03\x1E\x03\x1E\x07" +
		"\x1E\xC2\n\x1E\f\x1E\x0E\x1E\xC5\v\x1E\x03\x1E\x03\x1E\x07\x1E\xC9\n\x1E" +
		"\f\x1E\x0E\x1E\xCC\v\x1E\x03\x1E\x03\x1E\x07\x1E\xD0\n\x1E\f\x1E\x0E\x1E" +
		"\xD3\v\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03" +
		" \x03 \x03!\x03!\x03!\x03!\x03!\x05\xC3\xCA\xD1\x02\x02\"\x03\x02\x03" +
		"\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02" +
		"\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F" +
		"\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18" +
		"/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x02;\x02\x02=\x02\x1E" +
		"?\x02\x1FA\x02 \x03\x02\x07\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x04\x02" +
		"C\\c|\x05\x022;C\\c|\x05\x02NNWWww\x02\xED\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03" +
		"\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02" +
		"\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x02" +
		"1\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02" +
		"\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02" +
		"\x03C\x03\x02\x02\x02\x05F\x03\x02\x02\x02\x07H\x03\x02\x02\x02\tJ\x03" +
		"\x02\x02\x02\vL\x03\x02\x02\x02\rP\x03\x02\x02\x02\x0FR\x03\x02\x02\x02" +
		"\x11T\x03\x02\x02\x02\x13V\x03\x02\x02\x02\x15X\x03\x02\x02\x02\x17Z\x03" +
		"\x02\x02\x02\x19\\\x03\x02\x02\x02\x1Bj\x03\x02\x02\x02\x1Dv\x03\x02\x02" +
		"\x02\x1Fx\x03\x02\x02\x02!\x85\x03\x02\x02\x02#\x87\x03\x02\x02\x02%\x89" +
		"\x03\x02\x02\x02\'\x8B\x03\x02\x02\x02)\x8E\x03\x02\x02\x02+\x92\x03\x02" +
		"\x02\x02-\x97\x03\x02\x02\x02/\xA2\x03\x02\x02\x021\xA8\x03\x02\x02\x02" +
		"3\xAA\x03\x02\x02\x025\xAE\x03\x02\x02\x027\xB8\x03\x02\x02\x029\xBD\x03" +
		"\x02\x02\x02;\xBF\x03\x02\x02\x02=\xD6\x03\x02\x02\x02?\xD9\x03\x02\x02" +
		"\x02A\xDE\x03\x02\x02\x02CD\x07<\x02\x02DE\x07?\x02\x02E\x04\x03\x02\x02" +
		"\x02FG\x07=\x02\x02G\x06\x03\x02\x02\x02HI\x07*\x02\x02I\b\x03\x02\x02" +
		"\x02JK\x07+\x02\x02K\n\x03\x02\x02\x02LM\x07n\x02\x02MN\x07g\x02\x02N" +
		"O\x07v\x02\x02O\f\x03\x02\x02\x02PQ\x07`\x02\x02Q\x0E\x03\x02\x02\x02" +
		"RS\x07,\x02\x02S\x10\x03\x02\x02\x02TU\x071\x02\x02U\x12\x03\x02\x02\x02" +
		"VW\x07\'\x02\x02W\x14\x03\x02\x02\x02XY\x07-\x02\x02Y\x16\x03\x02\x02" +
		"\x02Z[\x07/\x02\x02[\x18\x03\x02\x02\x02\\]\x07?\x02\x02]\x1A\x03\x02" +
		"\x02\x02^_\x07(\x02\x02_k\x07(\x02\x02`a\x07c\x02\x02ab\x07p\x02\x02b" +
		"k\x07f\x02\x02cd\x07c\x02\x02de\x07p\x02\x02ef\x07f\x02\x02fg\x07c\x02" +
		"\x02gh\x07n\x02\x02hi\x07u\x02\x02ik\x07q\x02\x02j^\x03\x02\x02\x02j`" +
		"\x03\x02\x02\x02jc\x03\x02\x02\x02k\x1C\x03\x02\x02\x02lm\x07~\x02\x02" +
		"mw\x07~\x02\x02no\x07q\x02\x02ow\x07t\x02\x02pq\x07q\x02\x02qr\x07t\x02" +
		"\x02rs\x07g\x02\x02st\x07n\x02\x02tu\x07u\x02\x02uw\x07g\x02\x02vl\x03" +
		"\x02\x02\x02vn\x03\x02\x02\x02vp\x03\x02\x02\x02w\x1E\x03\x02\x02\x02" +
		"xy\x07p\x02\x02yz\x07q\x02\x02z{\x07v\x02\x02{ \x03\x02\x02\x02|}\x07" +
		"v\x02\x02}~\x07t\x02\x02~\x7F\x07w\x02\x02\x7F\x86\x07g\x02\x02\x80\x81" +
		"\x07h\x02\x02\x81\x82\x07c\x02\x02\x82\x83\x07n\x02\x02\x83\x84\x07u\x02" +
		"\x02\x84\x86\x07g\x02\x02\x85|\x03\x02\x02\x02\x85\x80\x03\x02\x02\x02" +
		"\x86\"\x03\x02\x02\x02\x87\x88\x07@\x02\x02\x88$\x03\x02\x02\x02\x89\x8A" +
		"\x07>\x02\x02\x8A&\x03\x02\x02\x02\x8B\x8C\x07@\x02\x02\x8C\x8D\x07?\x02" +
		"\x02\x8D(\x03\x02\x02\x02\x8E\x8F\x07>\x02\x02\x8F\x90\x07?\x02\x02\x90" +
		"*\x03\x02\x02\x02\x91\x93\t\x02\x02\x02\x92\x91\x03\x02\x02\x02\x93\x94" +
		"\x03\x02\x02\x02\x94\x92\x03\x02\x02\x02\x94\x95\x03\x02\x02\x02\x95," +
		"\x03\x02\x02\x02\x96\x98\t\x02\x02\x02\x97\x96\x03\x02\x02\x02\x98\x99" +
		"\x03\x02\x02\x02\x99\x97\x03\x02\x02\x02\x99\x9A\x03\x02\x02\x02\x9A\x9B" +
		"\x03\x02\x02\x02\x9B\x9D\x070\x02\x02\x9C\x9E\t\x02\x02\x02\x9D\x9C\x03" +
		"\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\x9F\xA0\x03" +
		"\x02\x02\x02\xA0.\x03\x02\x02\x02\xA1\xA3\t\x03\x02\x02\xA2\xA1\x03\x02" +
		"\x02\x02\xA3\xA4\x03\x02\x02\x02\xA4\xA2\x03\x02\x02\x02\xA4\xA5\x03\x02" +
		"\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA7\b\x18\x02\x02\xA70\x03\x02\x02" +
		"\x02\xA8\xA9\t\x04\x02\x02\xA92\x03\x02\x02\x02\xAA\xAB\x07x\x02\x02\xAB" +
		"\xAC\x07c\x02\x02\xAC\xAD\x07n\x02\x02\xAD4\x03\x02\x02\x02\xAE\xAF\x07" +
		"n\x02\x02\xAF\xB0\x07q\x02\x02\xB0\xB1\x07e\x02\x02\xB1\xB2\x07c\x02\x02" +
		"\xB2\xB3\x07n\x02\x02\xB3\xB4\x07\"\x02\x02\xB4\xB5\x07x\x02\x02\xB5\xB6" +
		"\x07c\x02\x02\xB6\xB7\x07n\x02\x02\xB76\x03\x02\x02\x02\xB8\xB9\t\x05" +
		"\x02\x02\xB98\x03\x02\x02\x02\xBA\xBB\x07w\x02\x02\xBB\xBE\x07:\x02\x02" +
		"\xBC\xBE\t\x06\x02\x02\xBD\xBA\x03\x02\x02\x02\xBD\xBC\x03\x02\x02\x02" +
		"\xBE:\x03\x02\x02\x02\xBF\xC3\x07$\x02\x02\xC0\xC2\v\x02\x02\x02\xC1\xC0" +
		"\x03\x02\x02\x02\xC2\xC5\x03\x02\x02\x02\xC3\xC4\x03\x02\x02\x02\xC3\xC1" +
		"\x03\x02\x02\x02\xC4\xC6\x03\x02\x02\x02\xC5\xC3\x03\x02\x02\x02\xC6\xCA" +
		"\x07*\x02\x02\xC7\xC9\v\x02\x02\x02\xC8\xC7\x03\x02\x02\x02\xC9\xCC\x03" +
		"\x02\x02\x02\xCA\xCB\x03\x02\x02\x02\xCA\xC8\x03\x02\x02\x02\xCB\xCD\x03" +
		"\x02\x02\x02\xCC\xCA\x03\x02\x02\x02\xCD\xD1\x07+\x02\x02\xCE\xD0\v\x02" +
		"\x02\x02\xCF\xCE\x03\x02\x02\x02\xD0\xD3\x03\x02\x02\x02\xD1\xD2\x03\x02" +
		"\x02\x02\xD1\xCF\x03\x02\x02\x02\xD2\xD4\x03\x02\x02\x02\xD3\xD1\x03\x02" +
		"\x02\x02\xD4\xD5\x07$\x02\x02\xD5<\x03\x02\x02\x02\xD6\xD7\x07k\x02\x02" +
		"\xD7\xD8\x07h\x02\x02\xD8>\x03\x02\x02\x02\xD9\xDA\x07v\x02\x02\xDA\xDB" +
		"\x07j\x02\x02\xDB\xDC\x07g\x02\x02\xDC\xDD\x07p\x02\x02\xDD@\x03\x02\x02" +
		"\x02\xDE\xDF\x07g\x02\x02\xDF\xE0\x07n\x02\x02\xE0\xE1\x07u\x02\x02\xE1" +
		"\xE2\x07g\x02\x02\xE2B\x03\x02\x02\x02\x0E\x02jv\x85\x94\x99\x9F\xA4\xBD" +
		"\xC3\xCA\xD1\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

